npm -v 11.3.0
node -v v22.14.0

npm run build

> zent@0.0.0 build
> vite build

vite v7.1.4 building for production...
✓ 63 modules transformed.
dist/registerSW.js                      0.13 kB
dist/manifest.webmanifest               0.37 kB
dist/index.html                         0.99 kB │ gzip:   0.52 kB
dist/assets/BBVA-CG642u-Z.svg           6.04 kB │ gzip:   2.91 kB
dist/assets/mercadoPago-4ZLaM5mi.svg    6.40 kB │ gzip:   2.86 kB
dist/assets/index-C6KrucfK.css         30.49 kB │ gzip:   5.96 kB
dist/assets/index-BGIQ7gKO.js         842.96 kB │ gzip: 232.84 kB

(!) Some chunks are larger than 500 kB after minification. Consider:
- Using dynamic import() to code-split the application
- Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/configuration-options/#output-manualchunks
- Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.
✓ built in 3.18s

PWA v1.0.3
mode      generateSW
precache  6 entries (854.07 KiB)
files generated
  dist/sw.js
  dist/workbox-5ffe50d4.js

firebase --version
14.16.0

firebase deploy --project zent-9e08f

tenía un secreto en github llamado FIREBASE_SERVICE_ACCOUNT_ZENT_9E08F pero no recuerdo el contenido

//package.json
{
  "name": "zent",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "chart.js": "^4.5.0",
    "firebase": "^12.2.1",
    "react": "^19.1.1",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.1.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@tailwindcss/forms": "^0.5.10",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react-swc": "^4.0.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "vite": "^7.1.2",
    "vite-plugin-pwa": "^1.0.3"
  }
}

//firebase.json

{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ]
  }
}

//postcss.config.cjs

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

//firebaserc
{
  "projects": {
    "default": "zent-9e08f",
    "zent": "zent-9e08f"
  },
  "targets": {},
  "etags": {}
}

tailwind.config.cjs

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ['./index.html', './src/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {
      fontFamily: {
        // Asegúrate de tener la fuente en index.html (abajo lo pongo)
        inter: ['Inter', 'ui-sans-serif', 'system-ui', 'sans-serif'],
      },
      colors: {
        // Tokens de color (inspirado en Firebase/Google)
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          200: '#bfdbfe',
          300: '#93c5fd',
          400: '#60a5fa',
          500: '#3b82f6',
          600: '#2563eb', // principal
          700: '#1d4ed8',
          800: '#1e40af',
          900: '#1e3a8a',
        },
        surface: {
          // superficies “tarjeta” claras
          0: '#ffffff',
          50: '#f9fafb',
          100: '#f3f4f6',
        },
        // Estados estándar
        success: '#10b981',
        warning: '#f59e0b',
        danger: '#ef4444',
      },
      borderRadius: {
        xl: '0.9rem',
        '2xl': '1.2rem',
      },
      boxShadow: {
        // sombras suaves tipo Material
        'elev-1': '0 1px 2px rgba(0,0,0,.06), 0 1px 1px rgba(0,0,0,.04)',
        'elev-2': '0 2px 6px rgba(0,0,0,.06), 0 2px 4px rgba(0,0,0,.06)',
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'), // inputs bonitos/coherentes
  ],
};

vite.config.js
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react-swc';
import { VitePWA } from 'vite-plugin-pwa';

export default defineConfig({
  plugins: [
    react(),
    VitePWA({
      registerType: 'autoUpdate',
      includeAssets: ['favicon.ico', 'apple-touch-icon.png'],
      manifest: {
        name: 'Zent',
        short_name: 'Zent',
        start_url: '/',
        scope: '/',
        display: 'standalone',
        background_color: '#ffffff',
        theme_color: '#2563eb',
        icons: [
          { src: '/pwa-192.png', sizes: '192x192', type: 'image/png' },
          { src: '/pwa-512.png', sizes: '512x512', type: 'image/png' },
          { src: '/pwa-maskable.png', sizes: '512x512', type: 'image/png', purpose: 'maskable' }
        ]
      }
    })
  ]
});

eslint.config.js

import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import { defineConfig, globalIgnores } from 'eslint/config'

export default defineConfig([
  globalIgnores(['dist']),
  {
    files: ['**/*.{js,jsx}'],
    extends: [
      js.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    rules: {
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
    },
  },
])


mi .env está mal por que no lo subí al repositorio por lo que no está como parte de mi proyecto cuando lo cloné de nuevo, 

/src/firebase.js 

// Import the functions you need from the SDKs you need
import { initializeApp, getApps, getApp } from "firebase/app";
import {
    initializeAuth,
    indexedDBLocalPersistence,
    browserLocalPersistence,
    browserSessionPersistence,
    browserPopupRedirectResolver,
    getAuth, // fallback si Auth ya fue inicializado en caliente (HMR)
    GoogleAuthProvider,
} from "firebase/auth";
import { getFirestore } from "firebase/firestore";
// TODO: Add SDKs for Firebase products that you want to use
// https://firebase.google.com/docs/web/setup#available-libraries

// Your web app's Firebase configuration
// For Firebase JS SDK v7.20.0 and later, measurementId is optional
const firebaseConfig = {
    apiKey: "AIzaSyBzca0Xc72nVmeRnNDgmMNdQ6riMI9sqns",
    authDomain: "zent-9e08f.firebaseapp.com",
    projectId: "zent-9e08f",
    storageBucket: "zent-9e08f.appspot.com",
    messagingSenderId: "914474229659",
    appId: "1:914474229659:web:e66f0d2778da6433d28b3e",
    measurementId: "G-Y6DH5TFQYY"
};

const app = getApps().length ? getApp() : initializeApp(firebaseConfig);

// Inicializa Auth con persistencias robustas y resolver de popup/redirect
let auth;
try {
    auth = initializeAuth(app, {
        persistence: [
            indexedDBLocalPersistence,     // la más confiable en móvil
            browserLocalPersistence,
            browserSessionPersistence,
        ],
        popupRedirectResolver: browserPopupRedirectResolver,
    });
} catch {
    // Si ya estaba inicializado (HMR en dev), sólo recupéralo
    auth = getAuth(app);
}

const db = getFirestore(app);

// (Opcional) si en algún sitio importas este provider:
const googleProvider = new GoogleAuthProvider();

export { app, db, auth, googleProvider };

// src/components/AccountBalances.jsx
const DOT = {
    indigo: "bg-indigo-500",
    orange: "bg-orange-500",
    teal: "bg-teal-500",
    green: "bg-green-500",
    red: "bg-red-500",
};

const fmt = (n, c = "MXN") =>
    new Intl.NumberFormat(c === "MXN" ? "es-MX" : "en-US", { style: "currency", currency: c }).format(n || 0);

export default function AccountBalances({ ACCOUNTS, balances, totalBalance }) {
    return (
        <div className="mt-8">
            <h2 className="text-lg sm:text-xl font-semibold mb-2 text-gray-700">Saldos de Cuentas</h2>
            <p className="text-sm text-gray-500 mb-3">Resumen por cuenta (estimado en su moneda).</p>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                {Object.keys(ACCOUNTS).map(k => {
                    const a = ACCOUNTS[k];
                    const b = balances[k]?.balance || 0;
                    return (
                        <div key={k} className="rounded-xl border border-gray-100 bg-white p-4">
                            <div className="flex items-center justify-between">
                                <h3 className="font-semibold text-gray-800">{a.name}</h3>
                                <span className="text-[10px] px-2 py-0.5 rounded-full bg-gray-100 text-gray-500">
                                    {a.currency}
                                </span>
                            </div>
                            <p className="mt-1 text-lg font-bold text-gray-900">{fmt(b, a.currency)}</p>
                        </div>
                    );
                })}
            </div>

            <div className="mt-4 rounded-xl border border-indigo-100 bg-indigo-50 p-4">
                <div className="flex items-center justify-between">
                    <h3 className="font-semibold text-indigo-800">Total General (aprox. MXN)</h3>
                    <span className="text-[10px] px-2 py-0.5 rounded-full bg-white text-indigo-600 border border-indigo-200">
                        MXN
                    </span>
                </div>
                <p className="mt-1 text-2xl font-bold text-indigo-900">{fmt(totalBalance)}</p>
            </div>
        </div>

    );
}

//src/components/AuthGate.jsx
import React, { useEffect, useState, useRef } from "react";
import {
    onAuthStateChanged,
    signInWithPopup,
    signInWithRedirect,
    getRedirectResult,
    GoogleAuthProvider,
    signInWithEmailAndPassword,
    createUserWithEmailAndPassword,
    signOut,
    sendPasswordResetEmail,
    updateProfile,
    sendEmailVerification,
} from "firebase/auth";
import { getApp } from "firebase/app";
// Corregimos la ruta de importación para que sea relativa
import { auth } from "../firebase.js";

// ============ Logger con marca de sesión ============
const SESSION_TAG = Math.random().toString(36).slice(2, 7).toUpperCase();
const now = () => new Date().toISOString().split("T")[1].slice(0, 12);
const LG = {
    info: (...a) => console.info(`[AuthGate ${SESSION_TAG}] ${now()}`, ...a),
    warn: (...a) => console.warn(`[AuthGate ${SESSION_TAG}] ${now()}`, ...a),
    error: (...a) => console.error(`[AuthGate ${SESSION_TAG}] ${now()}`, ...a),
    group: (l) => console.group(`[AuthGate ${SESSION_TAG}] ${now()} ${l}`),
    end: () => console.groupEnd(),
};

// ============ Detección de entorno ============
const uaMobileGuess =
    /Android|iPhone|iPad|iPod|Mobile/i.test(navigator.userAgent) ||
    (navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1);

const chMobile = navigator.userAgentData?.mobile ?? null;
const isMobileWeb = chMobile ?? uaMobileGuess;

const isInAppBrowser = /(FBAN|FBAV|Instagram|Line|Twitter|Pinterest|LinkedInApp)/i.test(
    navigator.userAgent
);

// Flags útiles para pruebas locales (opcional)
const qp = new URLSearchParams(location.search);
const FORCE_POPUP = qp.get("auth") === "popup";

// Clave para saber si salimos a redirect
const REDIRECT_KEY = "auth_redirect_in_progress";

export default function AuthGate({ children }) {
    const [loading, setLoading] = useState(true);
    const [user, setUser] = useState(null);

    // ---- Estados para Email/Pass ----
    const [mode, setMode] = useState("signin"); // 'signin' | 'signup'
    const [email, setEmail] = useState("");
    const [pass, setPass] = useState("");
    const [confirm, setConfirm] = useState("");
    const [displayName, setDisplayName] = useState("");

    const [error, setError] = useState("");
    const [signingIn, setSigningIn] = useState(false);
    const signingInRef = useRef(false);
    // Usamos una ref para asegurarnos que el resultado del redirect se procese una sola vez
    const redirectResultProcessed = useRef(false);

    // Listener de Auth + resolución de redirect (LÓGICA REESCRITA)
    useEffect(() => {
        // Esta ref previene que la lógica se ejecute dos veces en StrictMode
        if (redirectResultProcessed.current) {
            return;
        }
        redirectResultProcessed.current = true;

        let unsub = () => { };

        // Primero, intentamos obtener el resultado de una redirección.
        getRedirectResult(auth)
            .then(userCredential => {
                sessionStorage.removeItem(REDIRECT_KEY);
                if (userCredential) {
                    LG.info("getRedirectResult SUCCESS", { uid: userCredential.user.uid });
                } else {
                    LG.info("No pending redirect result.");
                }
            })
            .catch(error => {
                LG.error("getRedirectResult FAILED", error);
                setError(error.message);
                sessionStorage.removeItem(REDIRECT_KEY);
            })
            .finally(() => {
                // DESPUÉS de procesar el redirect (exitoso o no),
                // establecemos el listener de estado como la fuente final de verdad.
                unsub = onAuthStateChanged(auth, (user) => {
                    LG.info("onAuthStateChanged FIRED", user ? { uid: user.uid } : null);
                    setUser(user);
                    setLoading(false); // Ahora sabemos el estado final y podemos dejar de cargar.
                });
            });

        return () => {
            unsub();
        };
    }, []);


    const signInGoogle = async () => {
        if (signingInRef.current) {
            LG.warn("[signInGoogle] ignored (busy)");
            return;
        }
        signingInRef.current = true;
        setSigningIn(true);
        setError("");

        LG.group("[Google Sign-In]");
        LG.info("UA mobile?:", isMobileWeb, "inApp?:", isInAppBrowser);

        const provider = new GoogleAuthProvider();
        provider.setCustomParameters({ prompt: "select_account" });

        if (isMobileWeb && !FORCE_POPUP) {
            try {
                LG.info("→ Mobile device detected, using signInWithRedirect");
                sessionStorage.setItem(REDIRECT_KEY, "1");
                await signInWithRedirect(auth, provider);
            } catch (e) {
                LG.error("[redirect] error", e?.code, e?.message);
                setError(`${e?.code || "auth/error"}: ${e?.message}`);
                sessionStorage.removeItem(REDIRECT_KEY);
                signingInRef.current = false;
                setSigningIn(false);
            }
        } else {
            try {
                LG.info("→ Desktop device, trying signInWithPopup first");
                await signInWithPopup(auth, provider);
            } catch (e) {
                LG.error("[popup] error", e?.code, e?.message);
                const POPUP_BLOCKERS = new Set([
                    "auth/popup-blocked",
                    "auth/popup-closed-by-user",
                    "auth/cancelled-popup-request",
                    "auth/operation-not-supported-in-this-environment",
                ]);

                if (POPUP_BLOCKERS.has(e?.code)) {
                    try {
                        LG.info("→ popup failed, fallback to signInWithRedirect");
                        sessionStorage.setItem(REDIRECT_KEY, "1");
                        await signInWithRedirect(auth, provider);
                    } catch (e2) {
                        LG.error("[redirect] error", e2?.code, e2?.message);
                        setError(`${e2?.code || "auth/error"}: ${e2?.message}`);
                    }
                } else {
                    setError(`${e?.code || "auth/error"}: ${e?.message}`);
                }
            } finally {
                signingInRef.current = false;
                setSigningIn(false);
            }
        }
        LG.end();
    };

    const submitEmailPass = async (e) => {
        e.preventDefault();
        setError("");
        try {
            if (mode === "signin") {
                await signInWithEmailAndPassword(auth, email, pass);
            } else {
                if (pass.length < 6) throw { code: "auth/weak-password", message: "La contraseña debe tener al menos 6 caracteres." };
                if (pass !== confirm) throw { code: "auth/password-mismatch", message: "Las contraseñas no coinciden." };
                const { user: newUser } = await createUserWithEmailAndPassword(auth, email, pass);
                if (displayName?.trim()) await updateProfile(newUser, { displayName: displayName.trim() });
                await sendEmailVerification(newUser);
            }
        } catch (e2) {
            setError(`${e2?.code || "auth/error"}: ${e2?.message}`);
        }
    };

    const doLogout = async () => {
        await signOut(auth);
    };

    if (loading) {
        return (
            <div className="min-h-screen grid place-items-center bg-surface-50">
                <div className="text-slate-500 text-sm">Cargando sesión…</div>
            </div>
        );
    }

    if (!user) {
        return (
            <div className="min-h-screen flex items-center justify-center bg-surface-50 p-6">
                <div className="card shadow-elev-2 w-full max-w-md">
                    <div className="card-body p-6">
                        <h1 className="text-lg font-semibold text-slate-900 text-center">
                            {mode === "signin" ? "Accede a tu cuenta" : "Crea tu cuenta"}
                        </h1>

                        {error && (
                            <div className="mt-4 text-xs rounded-lg border border-red-200 bg-red-50 text-red-700 p-3">
                                {error}
                            </div>
                        )}

                        <button
                            onClick={signInGoogle}
                            className="btn btn-ghost w-full mt-5"
                            disabled={signingIn}
                        >
                            <span className="inline-flex items-center gap-2">
                                <svg width="16" height="16" viewBox="0 0 24 24" aria-hidden className="opacity-80">
                                    <path fill="#EA4335" d="M12 10.2v3.6h5.1c-.22 1.2-1.54 3.5-5.1 3.5a5.9 5.9 0 1 1 0-11.8c1.7 0 2.9.7 3.6 1.3l2.4-2.3C16.8 3 14.6 2.2 12 2.2 6.9 2.2 2.8 6.3 2.8 11.4S6.9 20.6 12 20.6c6.9 0 9.2-4.8 8.6-9.2H12z" />
                                </svg>
                                {mode === "signin" ? "Continuar con Google" : "Registrarte con Google"}
                            </span>
                        </button>

                        <div className="my-5 flex items-center gap-3">
                            <div className="h-px bg-surface-200 flex-1" />
                            <span className="text-[11px] text-slate-400">o con email</span>
                            <div className="h-px bg-surface-200 flex-1" />
                        </div>

                        <form onSubmit={submitEmailPass} className="space-y-3">
                            {mode === "signup" && (
                                <div>
                                    <label className="label">Nombre (opcional)</label>
                                    <input type="text" value={displayName} onChange={(e) => setDisplayName(e.target.value)} className="input" placeholder="Tu nombre" autoComplete="name" />
                                </div>
                            )}
                            <div>
                                <label className="label">Email</label>
                                <input type="email" required value={email} onChange={(e) => setEmail(e.target.value)} className="input" placeholder="tucorreo@ejemplo.com" autoComplete="email" />
                            </div>
                            <div>
                                <label className="label">Contraseña</label>
                                <input type="password" required value={pass} onChange={(e) => setPass(e.target.value)} className="input" placeholder="••••••••" autoComplete={mode === "signin" ? "current-password" : "new-password"} />
                            </div>
                            {mode === "signup" && (
                                <div>
                                    <label className="label">Confirmar contraseña</label>
                                    <input type="password" required value={confirm} onChange={(e) => setConfirm(e.target.value)} className="input" placeholder="••••••••" autoComplete="new-password" />
                                </div>
                            )}
                            <button type="submit" className="btn btn-primary w-full" disabled={mode === "signup" && (!pass || pass !== confirm)}>
                                {mode === "signin" ? "Iniciar sesión" : "Crear cuenta"}
                            </button>
                        </form>

                        <div className="mt-4 text-center text-[12px] text-slate-500">
                            {mode === "signin" ? (
                                <>
                                    ¿No tienes cuenta?{" "}
                                    <button type="button" onClick={() => setMode("signup")} className="underline">Crea una</button>
                                </>
                            ) : (
                                <>
                                    ¿Ya tienes cuenta?{" "}
                                    <button type="button" onClick={() => setMode("signin")} className="underline">Inicia sesión</button>
                                </>
                            )}
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    return <>{children}</>;
}

// src/components/DeleteConfirmationModal.jsx
export default function DeleteConfirmationModal({ item, onConfirm, onCancel }) {
    if (!item) return null;

    return (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40 backdrop-blur-sm">
            <div className="card shadow-elev-3 w-full max-w-sm m-4">
                <div className="card-body p-6 text-center">
                    <h2 className="text-base font-semibold text-slate-900">
                        Confirmar eliminación
                    </h2>
                    <p className="helper mt-2">
                        ¿Estás seguro de que deseas eliminar este registro?
                    </p>

                    <div className="flex justify-center gap-3 mt-6">
                        <button onClick={onCancel} className="btn btn-ghost">
                            Cancelar
                        </button>
                        <button onClick={onConfirm} className="btn btn-danger">
                            Eliminar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
}

// src/components/ExpenseForm.jsx
import { useEffect, useMemo, useState } from "react";

export default function ExpenseForm({ ACCOUNTS, CATEGORIES, onAddExpense, onNotify }) {
    const accountKeys = useMemo(() => Object.keys(ACCOUNTS || {}), [ACCOUNTS]);

    const [amount, setAmount] = useState("");
    const [currency, setCurrency] = useState("MXN");
    const [category, setCategory] = useState("Supermercado");
    const [account, setAccount] = useState("");

    // siempre selecciona una cuenta válida para la moneda actual
    useEffect(() => {
        if (!accountKeys.length) {
            setAccount("");
            return;
        }
        const current = ACCOUNTS[account];
        if (!current || current.currency !== currency) {
            const sameCurrency = accountKeys.find(k => ACCOUNTS[k].currency === currency);
            setAccount(sameCurrency || accountKeys[0]);
        }
    }, [currency, accountKeys.join(","), ACCOUNTS, account]);

    const submit = async (e) => {
        e.preventDefault();
        const numericAmount = parseFloat(amount);
        if (!numericAmount || numericAmount <= 0 || !category || !account) {
            onNotify("Por favor, completa todos los campos válidamente.", "error");
            return;
        }
        await onAddExpense({ amount: numericAmount, currency, category, account }); // 👈 guarda en la cuenta elegida
        setAmount("");
    };

    const filteredAccounts = accountKeys.filter(k => ACCOUNTS[k].currency === currency);
    const hasAccounts = filteredAccounts.length > 0;

    return (
        <section className="mt-8">
            <h2 className="text-lg sm:text-xl font-semibold mb-3 text-gray-700">Agregar Egreso</h2>

            <form onSubmit={submit} className="space-y-4 bg-gray-50 p-4 rounded-xl border border-gray-100">
                {/* Monto */}
                <div>
                    <label className="label">Monto ({currency})</label>
                    <input
                        type="number"
                        inputMode="decimal"
                        step="0.01"
                        value={amount}
                        onChange={(e) => setAmount(e.target.value)}
                        placeholder="500"
                        required
                        className="input"
                    />
                </div>

                {/* Moneda */}
                <div>
                    <label className="label">Moneda</label>
                    <div className="w-full bg-slate-100 p-1 rounded-xl border border-slate-200 flex" role="group" aria-label="Seleccionar moneda">
                        <button type="button" onClick={() => setCurrency("MXN")}
                            className={`flex-1 px-3 py-2 text-sm font-medium transition rounded-l-xl ${currency === "MXN" ? "bg-blue-600 text-white shadow-sm" : "bg-transparent text-slate-700 hover:bg-white"}`}>
                            MXN
                        </button>
                        <button type="button" onClick={() => setCurrency("USD")}
                            className={`flex-1 px-3 py-2 text-sm font-medium transition rounded-r-xl ${currency === "USD" ? "bg-blue-600 text-white shadow-sm" : "bg-transparent text-slate-700 hover:bg-white"}`}>
                            USD
                        </button>
                    </div>
                </div>

                {/* Categoría */}
                <div>
                    <label className="label">Categoría</label>
                    <select
                        value={category}
                        onChange={(e) => setCategory(e.target.value)}
                        required
                        className="select"
                    >
                        {Object.keys(CATEGORIES).map((group) => (
                            <optgroup key={group} label={group}>
                                {CATEGORIES[group].items.map((item) => (
                                    <option key={item} value={item}>
                                        {item}
                                    </option>
                                ))}
                            </optgroup>
                        ))}
                    </select>
                </div>

                {/* Cuenta */}
                <div>
                    <label className="label">Pagar con</label>
                    <select
                        value={account}
                        onChange={(e) => setAccount(e.target.value)}
                        className="select"
                        disabled={!hasAccounts}
                    >
                        {filteredAccounts.map((k) => (
                            <option key={k} value={k}>
                                {ACCOUNTS[k].name}
                            </option>
                        ))}
                    </select>
                    {!hasAccounts && (
                        <p className="text-xs text-slate-500 mt-1">No hay cuentas en {currency}. Crea una debajo.</p>
                    )}
                </div>

                {/* Submit */}
                <button type="submit" className="btn btn-primary w-full" disabled={!hasAccounts}>
                    Agregar egreso
                </button>
            </form>
        </section>
    );
}


// src/components/FinanceChart.jsx
import { Pie } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";
ChartJS.register(ArcElement, Tooltip, Legend);

const fmt = (n) =>
    new Intl.NumberFormat("es-MX", { style: "currency", currency: "MXN" }).format(n ?? 0);

export default function FinanceChart({
    data,
    options,
    chartView,
    setChartView,
    totalSalaryIncome,
    totalGlobalIncome,
}) {
    // Fallbacks
    const safeData =
        data && Array.isArray(data.labels)
            ? data
            : { labels: ["Sin datos"], datasets: [{ data: [1], backgroundColor: ["#e5e7eb"] }] };

    // Opciones + padding interno del lienzo
    const baseOptions =
        options || {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: { position: "bottom" },
                tooltip: { callbacks: { label: (c) => `${c.label}: ${fmt(c.parsed)}` } },
            },
        };

    // Merge sin perder lo que te llegue por props
    const mergedOptions = {
        ...baseOptions,
        layout: { ...(baseOptions.layout || {}), padding: 20 }, // 👈 más aire alrededor del pie
        plugins: {
            ...(baseOptions.plugins || {}),
            legend: {
                ...(baseOptions.plugins?.legend || {}),
                labels: {
                    ...(baseOptions.plugins?.legend?.labels || {}),
                    padding: 16, // 👈 aire entre etiquetas de la leyenda
                },
            },
        },
    };

    const segBtn = (active) => `btn btn-sm flex-1 ${active ? "btn-primary" : "btn-ghost"}`;
    const isStrategy = chartView === "strategy";

    return (
        // 👇 más padding en la tarjeta
        <section className="card card-soft p-6 sm:p-8 lg:p-10">
            {/* Toggle */}
            <div className="flex justify-center mb-4">
                <div className="bg-slate-100 p-1 rounded-lg flex w-full max-w-xs gap-1">
                    <button
                        type="button"
                        onClick={() => setChartView("strategy")}
                        className={segBtn(isStrategy)}
                        aria-pressed={isStrategy}
                    >
                        Estrategia (Salario)
                    </button>
                    <button
                        type="button"
                        onClick={() => setChartView("global")}
                        className={segBtn(!isStrategy)}
                        aria-pressed={!isStrategy}
                    >
                        Global
                    </button>
                </div>
            </div>

            {/* Títulos */}
            <h2 className="text-xl sm:text-2xl font-bold mb-1 text-center text-gray-800">
                {isStrategy ? "Distribución de tu Salario" : "Distribución Global"}
            </h2>
            <p className="text-center text-gray-600 mb-6">
                Total ingresado ({isStrategy ? "Salario" : "Global"}):
                <span className="font-bold text-emerald-700 ml-2">
                    {fmt(isStrategy ? totalSalaryIncome : totalGlobalIncome)}
                </span>
            </p>

            {/* Contenedor del gráfico con padding lateral extra */}
            <div className="relative h-80 md:h-[28rem] lg:h-[32rem] flex items-center justify-center px-3 sm:px-6">
                <Pie data={safeData} options={mergedOptions} />
            </div>
        </section>
    );
}

// src/components/Header.jsx
import React, { useEffect, useRef, useState } from "react";
import { auth } from "../firebase";
import { signOut } from "firebase/auth";

export default function Header() {
    const [user, setUser] = useState(null);
    const [open, setOpen] = useState(false);
    const closeTimer = useRef(null);

    useEffect(() => {
        setUser(auth.currentUser || null);
    }, []);

    const startClose = () => {
        closeTimer.current = setTimeout(() => setOpen(false), 120);
    };
    const cancelClose = () => {
        if (closeTimer.current) clearTimeout(closeTimer.current);
        setOpen(true);
    };

    const handleLogout = async () => {
        await signOut(auth);
        window.location.reload();
    };

    const goToLogin = () => window.location.reload();

    const displayName =
        user?.displayName ||
        user?.email?.split("@")[0] ||
        user?.providerData?.[0]?.email ||
        "Usuario";
    const email = user?.email || user?.providerData?.[0]?.email || "";
    const photo =
        user?.photoURL || user?.providerData?.[0]?.photoURL || null;

    return (
        <header className="sticky top-0 z-40 bg-white/80 backdrop-blur border-b border-slate-200">
            <div className="mx-auto w-full lg:w-4/5 px-4 h-14 flex items-center justify-between">
                {/* Marca */}
                <a href="/" className="flex items-center gap-2 text-slate-900 font-semibold tracking-wide">
                    <img
                        src="/assets/pwa-192.png"   // o /assets/pwa-512.png
                        alt="Zent"
                        className="h-7 w-7"
                    />
                    <span>Zent</span>
                </a>


                {/* Perfil */}
                <div
                    className="relative"
                    onMouseEnter={cancelClose}
                    onMouseLeave={startClose}
                >
                    <button
                        type="button"
                        onClick={() => setOpen((v) => !v)}
                        aria-haspopup="menu"
                        aria-expanded={open}
                        className="group flex items-center gap-3 pl-1 pr-2 py-1.5 rounded-full bg-transparent transition
                       hover:bg-slate-100 focus:bg-slate-100 focus:outline-none
                       ring-0 focus:ring-1 focus:ring-slate-200"
                    >
                        {/* Avatar: foto si hay, inicial si no */}
                        {photo ? (
                            <img
                                src={photo}
                                alt={displayName}
                                className="h-8 w-8 rounded-full object-cover ring-1 ring-slate-200"
                                referrerPolicy="no-referrer"
                            />
                        ) : (
                            <span className="inline-flex h-8 w-8 items-center justify-center rounded-full bg-slate-900 text-white text-xs">
                                {displayName.slice(0, 1).toUpperCase()}
                            </span>
                        )}

                        <div className="text-left leading-tight hidden sm:block">
                            <div className="text-sm font-medium text-slate-900 truncate max-w-[160px]">
                                {displayName}
                            </div>
                            <div className="text-[11px] text-slate-500 truncate max-w-[160px]">
                                {email}
                            </div>
                        </div>

                        <svg
                            className={`h-4 w-4 text-slate-500 transition-transform ${open ? "rotate-180" : ""}`}
                            viewBox="0 0 20 20"
                            fill="currentColor"
                        >
                            <path
                                fillRule="evenodd"
                                d="M5.23 7.21a.75.75 0 011.06.02L10 10.94l3.71-3.71a.75.75 0 011.08 1.04l-4.25 4.25a.75.75 0 01-1.08 0L5.21 8.27a.75.75 0 01.02-1.06z"
                                clipRule="evenodd"
                            />
                        </svg>
                    </button>

                    {/* Dropdown */}
                    {open && (
                        <div
                            role="menu"
                            className="absolute right-0 mt-2 w-52 rounded-2xl border border-slate-200 bg-white shadow-xl p-1.5 z-50"
                            onMouseEnter={cancelClose}
                            onMouseLeave={startClose}
                        >
                            {user ? (
                                <>
                                    <div className="px-2 py-2 text-xs text-slate-500">
                                        Sesión iniciada
                                    </div>
                                    <button
                                        onClick={handleLogout}
                                        className="w-full text-left px-2 py-2 rounded-lg hover:bg-slate-50 text-sm text-slate-700"
                                    >
                                        Cerrar sesión
                                    </button>
                                </>
                            ) : (
                                <>
                                    <div className="px-2 py-2 text-xs text-slate-500">
                                        No has iniciado sesión
                                    </div>
                                    <button
                                        onClick={goToLogin}
                                        className="w-full text-left px-2 py-2 rounded-lg hover:bg-slate-50 text-sm text-slate-700"
                                    >
                                        Iniciar sesión
                                    </button>
                                </>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </header>
    );
}

// src/components/HistoryTable.jsx
import React, { useMemo, useRef, useState } from "react";

const normCurrency = (c) => (c === "USD" ? "USD" : "MXN");
const toNum = (x) => {
    if (typeof x === "number") return Number.isFinite(x) ? x : 0;
    if (typeof x === "string") {
        const n = parseFloat(x.replace(/,/g, ""));
        return Number.isFinite(n) ? n : 0;
    }
    return 0;
};
const fmt = (n, c) => {
    const cur = normCurrency(c);
    const locale = cur === "USD" ? "en-US" : "es-MX";
    return new Intl.NumberFormat(locale, { style: "currency", currency: cur }).format(toNum(n));
};
const clean = (s) => {
    const v = (s ?? "").toString().trim();
    return v && v.toLowerCase() !== "nan" ? v : "";
};

// Fecha/hora helpers
const pad = (n) => String(n).padStart(2, "0");
const toInputLocal = (iso) => {
    if (!iso) return "";
    const d = new Date(iso);
    if (Number.isNaN(d.getTime())) return "";
    return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}T${pad(d.getHours())}:${pad(d.getMinutes())}`;
};
const fromInputLocal = (s) => {
    if (!s) return null;
    const d = new Date(s);
    if (Number.isNaN(d.getTime())) return null;
    return d.toISOString();
};

export default function HistoryTable({
    ACCOUNTS,               // { slug: { name, currency, color? } }
    ACCOUNT_IDS,            // { slug: id }
    movements = [],         // seguro
    onDeleteClick,
    onCsvExport,
    onCsvImport,
    onUpdateMovement,       // (id, tipo, payload)
}) {
    const importRef = useRef(null);

    // Estado de edición
    const [editingId, setEditingId] = useState(null);
    const [editDesc, setEditDesc] = useState("");
    const [editAccount, setEditAccount] = useState("");
    const [editAmount, setEditAmount] = useState("");

    // Transferencias
    const [editFrom, setEditFrom] = useState("");
    const [editTo, setEditTo] = useState("");
    const [editAmountSent, setEditAmountSent] = useState("");
    const [editAmountReceived, setEditAmountReceived] = useState("");

    // Fecha/hora
    const [editDate, setEditDate] = useState("");

    // Resolver cuenta por id/slug/nombre
    const accountEntries = Object.entries(ACCOUNTS || {});
    const idToSlug = useMemo(() => {
        const out = {};
        if (ACCOUNT_IDS) for (const slug of Object.keys(ACCOUNT_IDS)) out[ACCOUNT_IDS[slug]] = slug;
        return out;
    }, [ACCOUNT_IDS]);

    /**
     * Devuelve { id, slug, name, currency } o null
     * Acepta: id ("ItOx..."), slug ("bbva"), nombre ("BBVA")
     */
    const resolveAccount = (key) => {
        if (!key) return null;
        const raw = String(key).trim();

        // 1) ID → slug
        const slugFromId = idToSlug[raw];
        if (slugFromId && ACCOUNTS?.[slugFromId]) {
            return { id: ACCOUNT_IDS?.[slugFromId], slug: slugFromId, ...ACCOUNTS[slugFromId] };
        }

        // 2) slug directo
        if (ACCOUNTS?.[raw]) {
            const slug = raw;
            return { id: ACCOUNT_IDS?.[slug] ?? null, slug, ...ACCOUNTS[slug] };
        }

        // 3) por nombre
        const lower = raw.toLowerCase();
        const byName = accountEntries.find(([, a]) => a?.name?.toLowerCase() === lower);
        if (byName) {
            const slug = byName[0];
            return { id: ACCOUNT_IDS?.[slug] ?? null, slug, ...byName[1] };
        }

        // 4) alias comunes
        const alias = { mercadopago: "Mercado Pago", dolarapp: "Dolar App" };
        if (alias[lower]) {
            const byAlias = accountEntries.find(([, a]) => a?.name === alias[lower]);
            if (byAlias) {
                const slug = byAlias[0];
                return { id: ACCOUNT_IDS?.[slug] ?? null, slug, ...byAlias[1] };
            }
        }
        return null;
    };

    const getAccountName = (key) => resolveAccount(key)?.name || "(cuenta desconocida)";
    const getAccountCurrency = (key) => resolveAccount(key)?.currency || "MXN";

    // Edición fila
    const beginEdit = (mov) => {
        setEditingId(mov.id);
        setEditDesc(
            clean(mov.description) ||
            clean(mov.category) ||
            clean(mov.originalText?.split("(")[0] || "") ||
            ""
        );
        setEditDate(toInputLocal(mov.timestamp));

        const isTransfer = mov.movType?.includes("Transferencia");
        if (isTransfer) {
            setEditFrom(mov.from ?? "");
            setEditTo(mov.to ?? "");
            setEditAmountSent(
                mov.amountSent != null
                    ? String(mov.amountSent)
                    : mov.movType === "Transferencia Salida"
                        ? String(toNum(mov.amount))
                        : ""
            );
            setEditAmountReceived(
                mov.amountReceived != null
                    ? String(mov.amountReceived)
                    : mov.movType === "Transferencia Entrada"
                        ? String(toNum(mov.amount))
                        : ""
            );
            setEditAccount("");
            setEditAmount("");
        } else {
            setEditAccount(mov.account ?? "");
            setEditAmount(
                mov.movType === "Ingreso"
                    ? String(toNum(mov.amount ?? mov.convertedAmount))
                    : String(toNum(mov.amount))
            );
            setEditFrom("");
            setEditTo("");
            setEditAmountSent("");
            setEditAmountReceived("");
        }
    };

    const cancelEdit = () => {
        setEditingId(null);
        setEditDesc("");
        setEditAccount("");
        setEditAmount("");
        setEditFrom("");
        setEditTo("");
        setEditAmountSent("");
        setEditAmountReceived("");
        setEditDate("");
    };

    const saveEdit = async (mov) => {
        if (!onUpdateMovement) return;

        const isTransfer = mov.movType?.includes("Transferencia");
        const payload = { description: editDesc?.trim() || null };

        // fecha/hora
        const iso = fromInputLocal(editDate);
        if (iso) payload.timestamp = iso;

        if (isTransfer) {
            if (!editFrom || !editTo) return;
            const aSent = parseFloat(editAmountSent);
            const aRecv = parseFloat(editAmountReceived);
            if (!Number.isFinite(aSent) || aSent < 0) return;
            if (!Number.isFinite(aRecv) || aRecv < 0) return;

            const fromRes = resolveAccount(editFrom);
            const toRes = resolveAccount(editTo);

            payload.from = (fromRes?.id ?? ACCOUNT_IDS?.[fromRes?.slug]) || fromRes?.slug || editFrom;
            payload.to = (toRes?.id ?? ACCOUNT_IDS?.[toRes?.slug]) || toRes?.slug || editTo;
            payload.amountSent = aSent;
            payload.amountReceived = aRecv;
            payload.currencySent = getAccountCurrency(editFrom);
            payload.currencyReceived = getAccountCurrency(editTo);
        } else {
            if (!editAccount) return;
            const amt = parseFloat(editAmount);
            if (!Number.isFinite(amt) || amt <= 0) return;

            const accRes = resolveAccount(editAccount);
            const accId = (accRes?.id ?? ACCOUNT_IDS?.[accRes?.slug]) || accRes?.slug || editAccount;

            payload.account = accId; // guardamos por ID si está
            payload.amount = amt;

            const accCur = accRes?.currency || "MXN";
            if (accCur === "MXN") {
                payload.currency = "MXN";
                payload.convertedAmount = amt;
            } else {
                payload.currency = "USD";
                // Si quieres recalcular convertedAmount aquí, agrégalo con tu API FX.
            }
        }

        await onUpdateMovement(mov.id, isTransfer ? "Transferencia" : mov.movType, payload);
        cancelEdit();
    };

    // Render
    return (
        <section className="card card-padding">
            {/* Header acciones */}
            <div className="flex flex-wrap justify-between items-center mb-5 gap-4">
                <div>
                    <h2 className="text-base font-semibold text-slate-900">Historial de movimientos</h2>
                    <p className="text-xs text-slate-500 mt-0.5">Los datos se guardan en la nube (Firestore).</p>
                </div>

                <div className="flex items-center gap-2">
                    <input
                        ref={importRef}
                        type="file"
                        className="hidden"
                        accept=".csv"
                        onChange={onCsvImport}
                    />
                    <button
                        onClick={() => importRef.current?.click()}
                        className="btn btn-ghost btn-sm"
                        type="button"
                    >
                        Importar CSV
                    </button>
                    <button onClick={onCsvExport} className="btn btn-primary btn-sm" type="button">
                        Exportar CSV
                    </button>
                </div>
            </div>

            {/* Tabla */}
            <div className="mt-4 overflow-x-auto max-h-96 custom-scrollbar rounded-xl border border-slate-200">
                <table className="min-w-full text-xs">
                    <thead className="sticky top-0 bg-gray-50">
                        <tr className="text-left text-[11px] uppercase tracking-wide text-slate-500">
                            <th className="px-4 py-3 font-medium">Fecha</th>
                            <th className="px-4 py-3 font-medium">Tipo</th>
                            <th className="px-4 py-3 font-medium">Descripción</th>
                            <th className="px-4 py-3 font-medium">Cuenta</th>
                            <th className="px-4 py-3 font-medium text-right">Monto</th>
                            <th className="px-4 py-3 font-medium text-right">Acciones</th>
                        </tr>
                    </thead>

                    <tbody className="divide-y divide-slate-100">
                        {(!Array.isArray(movements) || movements.length === 0) ? (
                            <tr>
                                <td colSpan="6" className="px-4 py-10">
                                    <div className="flex flex-col items-center justify-center text-center">
                                        <div className="h-10 w-10 rounded-full bg-slate-100 grid place-items-center text-slate-400">ⓘ</div>
                                        <p className="mt-3 text-sm font-medium text-slate-700">No hay movimientos registrados</p>
                                        <p className="mt-1 text-xs text-slate-500">Agrega un ingreso, egreso o transferencia para verlos aquí.</p>
                                    </div>
                                </td>
                            </tr>
                        ) : (
                            movements.map((mov) => {
                                let amountDisplay = "";
                                let colorClass = "text-slate-600";
                                let description = "—";
                                let typeText = mov.movType || "Movimiento";
                                const isTransfer = mov.movType?.includes("Transferencia");

                                const accountName = mov.account ? getAccountName(mov.account) : "—";

                                switch (mov.movType) {
                                    case "Ingreso": {
                                        colorClass = "text-emerald-600";
                                        typeText = "Ingreso";
                                        amountDisplay = `+${fmt(mov.convertedAmount, "MXN")}`;
                                        const d1 = clean(mov.description);
                                        const d2 = clean(mov.originalText?.split("(")[0] || "");
                                        description = d1 || d2 || "Ingreso";
                                        break;
                                    }
                                    case "Egreso": {
                                        colorClass = "text-rose-600";
                                        typeText = "Egreso";
                                        const cur = mov.currency || getAccountCurrency(mov.account) || "MXN";
                                        amountDisplay = `-${fmt(mov.amount, cur)}`;
                                        description = clean(mov.description) || clean(mov.category) || "Egreso";
                                        break;
                                    }
                                    case "Transferencia Salida": {
                                        colorClass = "text-slate-600";
                                        typeText = "Envío";
                                        const cur = mov.currency || getAccountCurrency(mov.from) || "MXN";
                                        amountDisplay = `-${fmt(mov.amount, cur)}`;
                                        description = clean(mov.description) || `a ${getAccountName(mov.to)}`;
                                        break;
                                    }
                                    case "Transferencia Entrada": {
                                        colorClass = "text-emerald-700";
                                        typeText = "Recepción";
                                        const cur = mov.currency || getAccountCurrency(mov.to) || "MXN";
                                        amountDisplay = `+${fmt(mov.amount, cur)}`;
                                        description = clean(mov.description) || `de ${getAccountName(mov.from)}`;
                                        break;
                                    }
                                    default: {
                                        colorClass = "text-slate-600";
                                        typeText = mov.movType || "Movimiento";
                                        amountDisplay = fmt(mov.amount, mov.currency || "MXN");
                                        description = "—";
                                    }
                                }

                                const date = mov.timestamp ? new Date(mov.timestamp) : null;
                                const dateStr =
                                    date && !Number.isNaN(date.getTime())
                                        ? date.toLocaleString("es-MX", {
                                            year: "2-digit",
                                            month: "2-digit",
                                            day: "2-digit",
                                            hour: "2-digit",
                                            minute: "2-digit",
                                        })
                                        : "—";

                                const isEditing = editingId === mov.id;
                                const accountOptions = Object.keys(ACCOUNTS || {}); // slugs

                                return (
                                    <tr
                                        key={mov.tableId || mov.id}
                                        className="odd:bg-white even:bg-slate-50/40 hover:bg-slate-50 transition-colors"
                                    >
                                        {/* Fecha */}
                                        <td className="px-4 py-3 whitespace-nowrap text-slate-500">
                                            {isEditing ? (
                                                <input
                                                    type="datetime-local"
                                                    className="input input-sm"
                                                    value={editDate}
                                                    onChange={(e) => setEditDate(e.target.value)}
                                                />
                                            ) : (
                                                dateStr
                                            )}
                                        </td>

                                        {/* Tipo */}
                                        <td className={`px-4 py-3 whitespace-nowrap font-medium ${colorClass}`}>{typeText}</td>

                                        {/* Descripción */}
                                        <td className="px-4 py-3 whitespace-nowrap text-slate-800">
                                            {isEditing ? (
                                                <input
                                                    className="input input-sm w-56"
                                                    value={editDesc}
                                                    onChange={(e) => setEditDesc(e.target.value)}
                                                    placeholder="Descripción"
                                                />
                                            ) : (
                                                description
                                            )}
                                        </td>

                                        {/* Cuenta */}
                                        <td className="px-4 py-3 whitespace-nowrap text-slate-600">
                                            {isEditing ? (
                                                isTransfer ? (
                                                    <div className="flex items-center gap-2">
                                                        <select
                                                            value={editFrom}
                                                            onChange={(e) => setEditFrom(e.target.value)}
                                                            className="select select-sm"
                                                            title="Desde"
                                                        >
                                                            {accountOptions.map((slug) => (
                                                                <option key={slug} value={slug}>
                                                                    {ACCOUNTS[slug].name} ({ACCOUNTS[slug].currency})
                                                                </option>
                                                            ))}
                                                        </select>
                                                        <span className="text-slate-400">→</span>
                                                        <select
                                                            value={editTo}
                                                            onChange={(e) => setEditTo(e.target.value)}
                                                            className="select select-sm"
                                                            title="Hacia"
                                                        >
                                                            {accountOptions.map((slug) => (
                                                                <option key={slug} value={slug}>
                                                                    {ACCOUNTS[slug].name} ({ACCOUNTS[slug].currency})
                                                                </option>
                                                            ))}
                                                        </select>
                                                    </div>
                                                ) : (
                                                    <select
                                                        value={editAccount}
                                                        onChange={(e) => setEditAccount(e.target.value)}
                                                        className="select select-sm"
                                                    >
                                                        {accountOptions.map((slug) => (
                                                            <option key={slug} value={slug}>
                                                                {ACCOUNTS[slug].name} ({ACCOUNTS[slug].currency})
                                                            </option>
                                                        ))}
                                                    </select>
                                                )
                                            ) : (
                                                accountName
                                            )}
                                        </td>

                                        {/* Monto */}
                                        <td className={`px-4 py-3 whitespace-nowrap text-right font-semibold ${colorClass}`}>
                                            {isEditing ? (
                                                isTransfer ? (
                                                    <div className="flex items-center gap-2 justify-end">
                                                        <div className="flex items-center gap-1">
                                                            <span className="text-[10px] text-slate-500">Enviado</span>
                                                            <input
                                                                type="number"
                                                                step="0.01"
                                                                className="input input-sm w-24 text-right"
                                                                value={editAmountSent}
                                                                onChange={(e) => setEditAmountSent(e.target.value)}
                                                            />
                                                        </div>
                                                        <div className="flex items-center gap-1">
                                                            <span className="text-[10px] text-slate-500">Recibido</span>
                                                            <input
                                                                type="number"
                                                                step="0.01"
                                                                className="input input-sm w-24 text-right"
                                                                value={editAmountReceived}
                                                                onChange={(e) => setEditAmountReceived(e.target.value)}
                                                            />
                                                        </div>
                                                    </div>
                                                ) : (
                                                    <input
                                                        type="number"
                                                        step="0.01"
                                                        className="input input-sm w-28 text-right"
                                                        value={editAmount}
                                                        onChange={(e) => setEditAmount(e.target.value)}
                                                    />
                                                )
                                            ) : (
                                                amountDisplay
                                            )}
                                        </td>

                                        {/* Acciones */}
                                        <td className="px-4 py-3 whitespace-nowrap text-right">
                                            {isEditing ? (
                                                <div className="flex items-center justify-end gap-2">
                                                    <button
                                                        onClick={() => saveEdit(mov)}
                                                        className="btn btn-primary btn-xs"
                                                        type="button"
                                                        title="Guardar"
                                                    >
                                                        Guardar
                                                    </button>
                                                    <button
                                                        onClick={cancelEdit}
                                                        className="btn btn-ghost btn-xs"
                                                        type="button"
                                                        title="Cancelar"
                                                    >
                                                        Cancelar
                                                    </button>
                                                </div>
                                            ) : (
                                                <div className="flex items-center justify-end gap-2">
                                                    <button
                                                        onClick={() => beginEdit(mov)}
                                                        className="btn btn-ghost btn-xs text-slate-600 hover:text-slate-800"
                                                        type="button"
                                                        title="Editar"
                                                    >
                                                        Editar
                                                    </button>
                                                    <button
                                                        onClick={() =>
                                                            onDeleteClick(mov.id, mov.movType?.includes("Transferencia") ? "Transferencia" : mov.movType)
                                                        }
                                                        className="btn btn-ghost btn-xs text-rose-600 hover:text-rose-700"
                                                        type="button"
                                                        title="Eliminar"
                                                    >
                                                        Eliminar
                                                    </button>
                                                </div>
                                            )}
                                        </td>
                                    </tr>
                                );
                            })
                        )}
                    </tbody>
                </table>
            </div>
        </section>
    );
}



// src/components/IncomeForm.jsx
import { useEffect, useMemo, useState } from "react";

export default function IncomeForm({ ACCOUNTS, onAddIncome, onNotify }) {
    const accountKeys = useMemo(() => Object.keys(ACCOUNTS || {}), [ACCOUNTS]);

    // primera cuenta disponible
    const firstAccount = accountKeys[0] || "";

    const [amount, setAmount] = useState("");
    const [currency, setCurrency] = useState("MXN");
    const [rate, setRate] = useState("");
    const [account, setAccount] = useState(firstAccount);
    const [isSalary, setIsSalary] = useState(false);

    // cuando cambian las cuentas, o la moneda, selecciona una válida
    useEffect(() => {
        if (!accountKeys.length) {
            setAccount("");
            return;
        }
        // si cuenta actual no existe o no coincide con moneda → elige primera que coincida
        const current = ACCOUNTS[account];
        if (!current || current.currency !== currency) {
            const sameCurrency = accountKeys.find(k => ACCOUNTS[k].currency === currency);
            setAccount(sameCurrency || accountKeys[0]);
        }
    }, [currency, accountKeys.join(","), ACCOUNTS, account]);

    const submit = async (e) => {
        e.preventDefault();
        const numericAmount = parseFloat(amount);
        if (!numericAmount || numericAmount <= 0 || !account) {
            onNotify("Por favor, ingresa un monto válido y selecciona una cuenta.", "error");
            return;
        }
        await onAddIncome({
            amount: numericAmount,
            currency,
            manualRate: parseFloat(rate) || null,
            account,     // 👈 se guarda en la cuenta elegida
            isSalary,
        });
        // reset conservador: re-selecciona una cuenta válida para la moneda actual
        const nextAccount = accountKeys.find(k => ACCOUNTS[k].currency === currency) || accountKeys[0] || "";
        setAmount("");
        setRate("");
        setIsSalary(false);
        setAccount(nextAccount);
    };

    const segBtn = (isActive) =>
        `btn btn-sm flex-1 ${isActive ? "btn-primary" : "btn-ghost"}`;

    const hasAccounts = accountKeys.length > 0;

    return (
        <section>
            <h2 className="text-lg sm:text-xl font-semibold mb-3 text-gray-700">Agregar ingreso</h2>

            <form onSubmit={submit} className="space-y-4 bg-gray-50 p-4 rounded-xl border border-gray-100">
                {/* Monto */}
                <div>
                    <label className="label">Monto</label>
                    <input
                        type="number"
                        step="0.01"
                        value={amount}
                        onChange={(e) => setAmount(e.target.value)}
                        placeholder="10000"
                        required
                        className="input"
                    />
                </div>

                {/* Moneda */}
                <div>
                    <label className="label">Moneda</label>
                    <div className="w-full bg-slate-100 p-1 rounded-xl border border-slate-200 flex" role="group" aria-label="Seleccionar moneda">
                        <button type="button" onClick={() => setCurrency("MXN")}
                            className={`flex-1 px-3 py-2 text-sm font-medium transition rounded-l-xl ${currency === "MXN" ? "bg-blue-600 text-white shadow-sm" : "bg-transparent text-slate-700 hover:bg-white"}`}>
                            MXN
                        </button>
                        <button type="button" onClick={() => setCurrency("USD")}
                            className={`flex-1 px-3 py-2 text-sm font-medium transition rounded-r-xl ${currency === "USD" ? "bg-blue-600 text-white shadow-sm" : "bg-transparent text-slate-700 hover:bg-white"}`}>
                            USD
                        </button>
                    </div>
                </div>

                {/* Tipo de cambio (solo USD) */}
                {currency === "USD" && (
                    <div>
                        <label className="label">Tipo de cambio (opcional)</label>
                        <input
                            type="number"
                            step="0.0001"
                            value={rate}
                            onChange={(e) => setRate(e.target.value)}
                            placeholder="Automático si se deja vacío"
                            className="input"
                        />
                    </div>
                )}

                {/* Cuenta */}
                <div>
                    <label className="label">Depositar en cuenta</label>
                    <select
                        value={account}
                        onChange={(e) => setAccount(e.target.value)}
                        className="select"
                        disabled={!hasAccounts}
                    >
                        {accountKeys
                            .filter(k => ACCOUNTS[k].currency === currency)
                            .map((k) => (
                                <option key={k} value={k}>{ACCOUNTS[k].name}</option>
                            ))}
                    </select>
                    {!hasAccounts && (
                        <p className="text-xs text-slate-500 mt-1">No tienes cuentas aún. Crea una debajo.</p>
                    )}
                </div>

                {/* Checkbox salario */}
                <label className="flex items-center gap-2 text-sm text-slate-700">
                    <input
                        type="checkbox"
                        checked={isSalary}
                        onChange={(e) => setIsSalary(e.target.checked)}
                        className="rounded border-slate-300 text-blue-600 focus:ring-blue-500"
                    />
                    Es parte de mi salario (50/30/20)
                </label>

                {/* Botón */}
                <button type="submit" className="btn btn-primary w-full" disabled={!hasAccounts}>
                    Agregar ingreso
                </button>
            </form>
        </section>
    );
}


// src/components/AppNotification.jsx
export default function AppNotification({ message, type, onClose }) {
    if (!message) return null;
    const bg = type === "error" ? "bg-red-500" : "bg-green-600";

    return (
        <div className={`fixed top-5 right-5 ${bg} text-white py-2 px-4 rounded-lg shadow-lg z-50`}>
            <span>{message}</span>
            <button onClick={onClose} className="ml-4 font-bold">X</button>
        </div>
    );
}

//src/components/Strategy503020.jsx
// src/components/Strategy503020.jsx
import React, { useMemo } from "react";

const fmt = (n, c = "MXN") =>
    new Intl.NumberFormat(c === "MXN" ? "es-MX" : "en-US", {
        style: "currency",
        currency: c,
    }).format(Number.isFinite(n) ? n : 0);

// Convierte MXN → moneda seleccionada (MXN o USD)
const convertDisplay = (amountMx, displayCurrency, usdToMxn) => {
    const r = Number(usdToMxn) || 17.0;
    if (displayCurrency === "USD") return { value: (Number(amountMx) || 0) / r, currency: "USD" };
    return { value: Number(amountMx) || 0, currency: "MXN" };
};

export default function Strategy503020({
    data,              // { needs:{ideal,actual,remaining}, wants:{...}, future:{...} } en MXN
    strategy,          // { needs:{pct,account}, wants:{pct,account}, future:{pct,account} }
    onChangeStrategy,
    accountsMap,
    usdToMxn = 17.0,
    displayCurrency = "MXN",   // <-- NUEVO
}) {
    const safeStrategy = {
        needs: { pct: Number(strategy?.needs?.pct ?? 50), account: strategy?.needs?.account ?? Object.keys(accountsMap || {})[0] },
        wants: { pct: Number(strategy?.wants?.pct ?? 30), account: strategy?.wants?.account ?? Object.keys(accountsMap || {})[0] },
        future: { pct: Number(strategy?.future?.pct ?? 20), account: strategy?.future?.account ?? Object.keys(accountsMap || {})[0] },
    };

    const sumPct = (safeStrategy.needs.pct || 0) + (safeStrategy.wants.pct || 0) + (safeStrategy.future.pct || 0);
    const okPct = sumPct === 100;

    const accountOptions = useMemo(
        () =>
            Object.entries(accountsMap || {}).map(([slug, acc]) => ({
                slug,
                label: acc?.name || slug,
                currency: acc?.currency || "MXN",
            })),
        [accountsMap]
    );

    const recommended = { needs: 50, wants: 30, future: 20 };

    const handlePctChange = (key, val) => {
        const pct = Math.max(0, Math.min(100, Number(val) || 0));
        onChangeStrategy({
            ...safeStrategy,
            [key]: { ...safeStrategy[key], pct },
        });
    };

    const handleAccountChange = (key, slug) => {
        onChangeStrategy({
            ...safeStrategy,
            [key]: { ...safeStrategy[key], account: slug },
        });
    };

    const applyRecommended = () => {
        onChangeStrategy({
            needs: { pct: recommended.needs, account: safeStrategy.needs.account },
            wants: { pct: recommended.wants, account: safeStrategy.wants.account },
            future: { pct: recommended.future, account: safeStrategy.future.account },
        });
    };

    const blocks = [
        {
            key: "needs",
            title: "Necesidades",
            accent: {
                card: "border-orange-200 bg-orange-50",
                title: "text-orange-800",
                value: "text-orange-600",
                border: "border-orange-200/60",
            },
            logo: "/assets/logos/mercadoPago.svg",
        },
        {
            key: "wants",
            title: "Deseos",
            accent: {
                card: "border-teal-200 bg-teal-50",
                title: "text-teal-800",
                value: "text-teal-600",
                border: "border-teal-200/60",
            },
            logo: "/assets/logos/DolarApp.svg",
        },
        {
            key: "future",
            title: "Futuro",
            accent: {
                card: "border-indigo-200 bg-indigo-50",
                title: "text-indigo-800",
                value: "text-indigo-600",
                border: "border-indigo-200/60",
            },
            logo: "/assets/logos/BBVA.svg",
        },
    ];

    return (
        <div className="card card-padding">
            <div className="flex flex-col items-center gap-2 mb-3">
                <h2 className="text-xl sm:text-2xl font-bold text-gray-800 text-center">
                    Estrategia (personalizable)
                </h2>
                <div className="flex flex-col sm:flex-row items-center gap-2">
                    <p className="text-center text-gray-600">
                        Recomendada:&nbsp;<b>50%</b> Necesidades · <b>30%</b> Deseos · <b>20%</b> Futuro
                    </p>
                    <button
                        type="button"
                        onClick={applyRecommended}
                        className="btn btn-ghost btn-xs"
                        title="Aplicar recomendada 50/30/20"
                    >
                        Usar 50/30/20
                    </button>
                </div>
                <div className={`text-xs ${okPct ? "text-emerald-700" : "text-rose-700"}`}>
                    Porcentajes seleccionados: <b>{sumPct}%</b> {okPct ? "(válido)" : "(debe sumar 100%)"}
                </div>
                <div className="text-[11px] text-slate-500">
                    Mostrando en: <b>{displayCurrency}</b>
                </div>
            </div>

            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-5">
                {blocks.map(({ key, title, accent, logo }) => {
                    const pct = safeStrategy[key].pct;
                    const account = safeStrategy[key].account;
                    const info = data?.[key] || { ideal: 0, actual: 0, remaining: 0 };

                    // Convertimos SIEMPRE desde MXN a la moneda global seleccionada
                    const idealConv = convertDisplay(info.ideal, displayCurrency, usdToMxn);
                    const actualConv = convertDisplay(info.actual, displayCurrency, usdToMxn);
                    const remainingConv = convertDisplay(info.remaining, displayCurrency, usdToMxn);

                    return (
                        <div key={key} className={`relative rounded-xl p-4 sm:p-5 min-h-[188px] border ${accent.card}`}>
                            <img src={logo} alt="" className="absolute right-3 top-3 h-6 opacity-80" />

                            <div className="flex items-center justify-between gap-3 mb-2">
                                <h3 className={`text-base sm:text-lg font-semibold ${accent.title}`}>
                                    {title}
                                </h3>

                                {/* % input */}
                                <div className="flex items-center gap-2">
                                    <input
                                        type="number"
                                        min={0}
                                        max={100}
                                        value={pct}
                                        onChange={(e) => handlePctChange(key, e.target.value)}
                                        className="w-16 text-sm px-2 py-1 border rounded-lg"
                                        aria-label={`Porcentaje ${title}`}
                                    />
                                    <span className="text-xs text-gray-500">%</span>
                                </div>
                            </div>

                            {/* Cuenta select (sólo define destino; la moneda de display es global) */}
                            <label className="block text-xs text-gray-500 mb-1">Cuenta destino</label>
                            <select
                                value={account}
                                onChange={(e) => handleAccountChange(key, e.target.value)}
                                className="w-full text-sm px-2 py-2 border rounded-lg bg-white"
                                aria-label={`Cuenta para ${title}`}
                            >
                                {accountOptions.map((opt) => (
                                    <option key={opt.slug} value={opt.slug}>
                                        {opt.label} · {opt.currency}
                                    </option>
                                ))}
                            </select>

                            {/* Datos */}
                            <div className={`mt-3 pt-2 text-sm space-y-1 border-t ${accent.border}`}>
                                <p className="text-xs text-gray-500">Presupuesto ideal</p>
                                <p className={`text-lg sm:text-xl font-bold ${accent.value}`}>
                                    {fmt(idealConv.value, idealConv.currency)}
                                </p>
                                <div className="flex justify-between">
                                    <span>Gastado:</span>
                                    <span className="font-semibold">
                                        {fmt(actualConv.value, actualConv.currency)}
                                    </span>
                                </div>
                                <div className="flex justify-between font-semibold">
                                    <span>Restante:</span>
                                    <span>{fmt(remainingConv.value, remainingConv.currency)}</span>
                                </div>
                            </div>
                        </div>
                    );
                })}
            </div>

            {!okPct && (
                <div className="mt-3 text-xs text-rose-700 text-center">
                    Ajusta los porcentajes para que la suma total sea <b>100%</b>.
                </div>
            )}
        </div>
    );
}



// src/components/TransferForm.jsx
import { useMemo, useState } from "react";

export default function TransferForm({ ACCOUNTS, onAddTransfer, onNotify }) {
    const [from, setFrom] = useState("bbva");
    const [to, setTo] = useState("mercadoPago");
    const [amountSent, setAmountSent] = useState("");
    const [rate, setRate] = useState("");
    const [amountReceived, setAmountReceived] = useState("");

    const isUsdToMxn =
        ACCOUNTS[from]?.currency === "USD" && ACCOUNTS[to]?.currency === "MXN";

    // Cálculo en vivo del spread y % al teclear
    const liveSpread = useMemo(() => {
        const amt = parseFloat(amountSent);
        const r = parseFloat(rate);
        const rec = parseFloat(amountReceived);
        if (!isUsdToMxn || !amt || !r || !rec) return null;

        const expected = amt * r;
        const spr = expected - rec;
        const pct = expected > 0 ? (spr / expected) * 100 : 0;
        return { amount: spr, pct: pct };
    }, [amountSent, rate, amountReceived, isUsdToMxn]);

    const canSubmit = useMemo(() => {
        const amt = parseFloat(amountSent);
        if (!from || !to || from === to || !amt || amt <= 0) return false;
        if (isUsdToMxn) {
            const r = parseFloat(rate);
            const rec = parseFloat(amountReceived);
            if (!r || r <= 0 || !rec || rec <= 0) return false;
        }
        return true;
    }, [from, to, amountSent, rate, amountReceived, isUsdToMxn]);

    const submit = (e) => {
        e.preventDefault();
        if (!canSubmit) {
            onNotify("Revisa los campos antes de continuar.", "error");
            return;
        }

        const payload = {
            from,
            to,
            amountSent: parseFloat(amountSent),
        };

        if (isUsdToMxn) {
            const expected = parseFloat(amountSent) * parseFloat(rate);
            const spr = expected - parseFloat(amountReceived);
            Object.assign(payload, {
                rate: parseFloat(rate),
                amountReceived: parseFloat(amountReceived),
                spread: spr,
            });
        }

        onAddTransfer(payload);
        setAmountSent("");
        setRate("");
        setAmountReceived("");
    };

    return (
        <section className="bg-white p-6 rounded-2xl shadow-lg">
            <h2 className="text-xl font-semibold mb-3 text-center text-gray-900">
                Transferencia entre Cuentas
            </h2>

            <form
                onSubmit={submit}
                className="grid grid-cols-1 md:grid-cols-2 gap-4 items-end"
            >
                <div>
                    <label className="block text-sm text-gray-600 mb-1">De</label>
                    <select
                        value={from}
                        onChange={(e) => setFrom(e.target.value)}
                        className="w-full rounded-lg border border-gray-300 bg-gray-50 p-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                        {Object.keys(ACCOUNTS).map((k) => (
                            <option key={k} value={k}>
                                {ACCOUNTS[k].name} ({ACCOUNTS[k].currency})
                            </option>
                        ))}
                    </select>
                </div>

                <div>
                    <label className="block text-sm text-gray-600 mb-1">A</label>
                    <select
                        value={to}
                        onChange={(e) => setTo(e.target.value)}
                        className="w-full rounded-lg border border-gray-300 bg-gray-50 p-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                        {Object.keys(ACCOUNTS).map((k) => (
                            <option key={k} value={k}>
                                {ACCOUNTS[k].name} ({ACCOUNTS[k].currency})
                            </option>
                        ))}
                    </select>
                </div>

                <div>
                    <label className="block text-sm text-gray-600 mb-1">
                        Monto Enviado ({ACCOUNTS[from]?.currency})
                    </label>
                    <input
                        type="number"
                        step="0.01"
                        value={amountSent}
                        onChange={(e) => setAmountSent(e.target.value)}
                        placeholder="100.00"
                        className="w-full rounded-lg border border-gray-300 bg-gray-50 p-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        required
                    />
                </div>

                {isUsdToMxn && (
                    <div className="grid grid-cols-2 gap-4">
                        <div>
                            <label className="block text-sm text-gray-600 mb-1">
                                Tipo de cambio (USD→MXN)
                            </label>
                            <input
                                type="number"
                                step="0.0001"
                                value={rate}
                                onChange={(e) => setRate(e.target.value)}
                                placeholder="19.50"
                                className="w-full rounded-lg border border-gray-300 bg-gray-50 p-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                required
                            />
                            <p className="mt-1 text-[11px] text-gray-500">
                                Ingresa el tipo de cambio aplicado por el proveedor.
                            </p>
                        </div>

                        <div>
                            <label className="block text-sm text-gray-600 mb-1">
                                Monto Recibido (MXN)
                            </label>
                            <input
                                type="number"
                                step="0.01"
                                value={amountReceived}
                                onChange={(e) => setAmountReceived(e.target.value)}
                                placeholder="1950.00"
                                className="w-full rounded-lg border border-gray-300 bg-gray-50 p-2 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                required
                            />
                            <p className="mt-1 text-[11px] text-gray-500">
                                La cantidad que llegó efectivamente a la cuenta MXN.
                            </p>
                        </div>
                    </div>
                )}

                <div className="md:col-span-2">
                    <button
                        type="submit"
                        disabled={!canSubmit}
                        className={`w-full font-semibold py-2.5 rounded-lg transition ${canSubmit
                                ? "bg-blue-600 text-white hover:bg-blue-700 shadow-sm"
                                : "bg-gray-200 text-gray-500 cursor-not-allowed"
                            }`}
                    >
                        Registrar transferencia
                    </button>
                </div>
            </form>

            {/* Resumen de spread (si aplica) */}
            {liveSpread && (
                <div className="mt-4 text-center bg-yellow-50 border border-yellow-200 p-3 rounded-lg">
                    <p className="text-sm text-gray-800">
                        Spread cobrado:{" "}
                        <span className="font-semibold">
                            ${liveSpread.amount.toFixed(2)}
                        </span>{" "}
                        (
                        <span className="font-semibold">
                            {liveSpread.pct.toFixed(2)}%
                        </span>
                        )
                    </p>
                </div>
            )}
        </section>
    );
}
src/app.css

#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

// src/components/AccountBalances.jsx
const fmt = (n, c = "MXN") =>
    new Intl.NumberFormat(c === "MXN" ? "es-MX" : "en-US", { style: "currency", currency: c }).format(n || 0);

export default function AccountBalances({ accountsMap, balances, totalBalanceMx, totalSpentMx, onDeleteAccount }) {
    const accountKeys = Object.keys(accountsMap || {});
    return (
        <div className="mt-8">
            <h2 className="text-lg sm:text-xl font-semibold mb-2 text-gray-700">Saldos de Cuentas</h2>
            <p className="text-sm text-gray-500 mb-3">Resumen por cuenta (en su propia moneda).</p>

            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                {accountKeys.length === 0 ? (
                    <div className="text-sm text-slate-500">Aún no tienes cuentas. Agrega una para empezar.</div>
                ) : (
                    accountKeys.map((k) => {
                        const a = accountsMap[k];
                        const b = balances[k]?.balance || 0;
                        return (
                            <div key={k} className="relative rounded-xl border border-gray-100 bg-white p-4 pb-10">
                                {/* contenido */}
                                <div className="flex items-center justify-between">
                                    <h3 className="font-semibold text-gray-800">{a.name}</h3>
                                    <span className="text-[10px] px-2 py-0.5 rounded-full bg-gray-100 text-gray-500">
                                        {a.currency}
                                    </span>
                                </div>
                                <p className="mt-1 text-lg font-bold text-gray-900">
                                    {new Intl.NumberFormat(a.currency === "MXN" ? "es-MX" : "en-US", { style: "currency", currency: a.currency }).format(b || 0)}
                                </p>

                                {/* botón eliminar - esquina inferior derecha */}
                                <button
                                    type="button"
                                    title="Eliminar cuenta"
                                    onClick={() => onDeleteAccount?.(k)}
                                    className="absolute bottom-2 right-2 inline-flex items-center justify-center
                       h-8 w-8 rounded-full border border-slate-200 bg-white/80
                       text-slate-500 hover:text-red-600 hover:bg-red-50 shadow-sm transition"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M9 3h6a1 1 0 0 1 1 1v1h3a1 1 0 1 1 0 2h-1v12a3 3 0 0 1-3 3H8a3 3 0 0 1-3-3V7H4a1 1 0 1 1 0-2h3V4a1 1 0 0 1 1-1Zm1 2h4V5h-4Zm-2 4a1 1 0 1 1 2 0v9a1 1 0 1 1-2 0V9Zm6 0a1 1 0 1 1 2 0v9a1 1 0 1 1-2 0V9Z" />
                                    </svg>
                                </button>
                            </div>
                        );
                    })
                )}
            </div>


            {/* Totales apilados (dos filas) */}
            <div className="mt-4 space-y-3">
                <div className="rounded-xl border border-indigo-100 bg-indigo-50 p-4">
                    <div className="flex items-center justify-between">
                        <h3 className="font-semibold text-indigo-800">Total General (aprox. MXN)</h3>
                        <span className="text-[10px] px-2 py-0.5 rounded-full bg-white text-indigo-600 border border-indigo-200">MXN</span>
                    </div>
                    <p className="mt-1 text-2xl font-bold text-indigo-900">{fmt(totalBalanceMx, "MXN")}</p>
                </div>

                <div className="rounded-xl border border-rose-100 bg-rose-50 p-4">
                    <div className="flex items-center justify-between">
                        <h3 className="font-semibold text-rose-800">Total Gastado (MXN)</h3>
                        <span className="text-[10px] px-2 py-0.5 rounded-full bg-white text-rose-600 border border-rose-200">MXN</span>
                    </div>
                    <p className="mt-1 text-2xl font-bold text-rose-900">{fmt(totalSpentMx, "MXN")}</p>
                </div>
            </div>
        </div>
    );
}


// src/components/AddAccountForm.jsx
import { useState } from "react";

export default function AddAccountForm({ onCreate }) {
    const [name, setName] = useState("");
    const [currency, setCurrency] = useState("MXN");
    const [submitting, setSubmitting] = useState(false);

    const segBtn = (active) =>
        `text-sm px-3 py-2 rounded-lg border transition ${active
            ? "bg-blue-600 text-white border-blue-600"
            : "bg-white text-slate-700 border-slate-200 hover:bg-slate-50"
        }`;

    const submit = async (e) => {
        e.preventDefault();
        const n = name.trim();
        if (!n || submitting) return;
        try {
            setSubmitting(true);
            await onCreate({ name: n, currency });
            setName("");
            setCurrency("MXN");
        } finally {
            setSubmitting(false);
        }
    };

    return (
        <form
            onSubmit={submit}
            className="mt-4 bg-slate-50 border border-slate-200 p-3 md:p-4 rounded-xl"
        >
            {/* 1) Nombre (fila 1) */}
            <div className="mb-3">
                <label className="block text-xs font-medium text-slate-600 mb-1">
                    Nombre de la cuenta
                </label>
                <input
                    className="w-full rounded-xl border border-slate-300 px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="BBVA, Mercado Pago, Efectivo…"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    required
                />
            </div>

            {/* 2) Moneda (fila 2) */}
            <div className="mb-3">
                <label className="block text-xs font-medium text-slate-600 mb-1">
                    Moneda
                </label>

                {/* Segmented control full-width */}
                <div
                    role="group"
                    aria-label="Seleccionar moneda"
                    className="w-full bg-slate-100 border border-slate-200 rounded-xl p-1 flex"
                >
                    {/* Izquierda: MXN (bordes externos redondeados) */}
                    <button
                        type="button"
                        onClick={() => setCurrency("MXN")}
                        className={[
                            "flex-1 px-3 py-2 text-sm font-medium transition",
                            "rounded-l-xl",                 // solo borde externo
                            currency === "MXN"
                                ? "bg-blue-600 text-white shadow-sm"
                                : "bg-transparent text-slate-700 hover:bg-white"
                        ].join(" ")}
                    >
                        MXN
                    </button>

                    {/* Derecha: USD (bordes externos redondeados) */}
                    <button
                        type="button"
                        onClick={() => setCurrency("USD")}
                        className={[
                            "flex-1 px-3 py-2 text-sm font-medium transition",
                            "rounded-r-xl",                 // solo borde externo
                            currency === "USD"
                                ? "bg-blue-600 text-white shadow-sm"
                                : "bg-transparent text-slate-700 hover:bg-white"
                        ].join(" ")}
                    >
                        USD
                    </button>
                </div>
            </div>


            {/* 3) Botón (fila 3) */}
            <button
                className="w-full rounded-xl bg-blue-600 text-white font-medium py-2 hover:bg-blue-700 transition disabled:opacity-60"
                type="submit"
                disabled={!name.trim() || submitting}
            >
                {submitting ? "Agregando..." : "Agregar cuenta"}
            </button>
        </form>
    );
}


// src/App.jsx
import React, { useEffect, useMemo, useState } from "react";
import Header from "./components/Header.jsx";
import Notification from "./components/Notification.jsx";
import IncomeForm from "./components/IncomeForm.jsx";
import ExpenseForm from "./components/ExpenseForm.jsx";
import TransferForm from "./components/TransferForm.jsx";
import AccountBalances from "./components/AccountBalances.jsx";
import FinanceChart from "./components/FinanceChart.jsx";
import Strategy503020 from "./components/Strategy503020.jsx";
import HistoryTable from "./components/HistoryTable.jsx";
import DeleteConfirmationModal from "./components/DeleteConfirmationModal.jsx";


// import AddAccountForm from "./components/AddAccountForm.jsx";

import { db, auth } from "./firebase";
import { onAuthStateChanged } from "firebase/auth";
import {
  collection,
  onSnapshot,
  addDoc,
  deleteDoc,
  doc,
  updateDoc,
  setLogLevel,
} from "firebase/firestore";

// === DEBUG TOGGLE ===
const DEBUG =
  (typeof window !== "undefined" && new URLSearchParams(window.location.search).has("debug")) ||
  (import.meta?.env?.DEV ?? false);

const dlog = (...args) => { if (DEBUG) console.log("[DBG]", ...args); };
const dtable = (label, rows) => { if (DEBUG && rows?.length) { console.log(`[DBG] ${label}`); console.table(rows); } };

// --- Config ---
const API_URL_USD_TO_MXN = "https://open.er-api.com/v6/latest/USD";
const APP_ID = import.meta?.env?.VITE_APP_ID || "zent-app";

export const ACCOUNTS = {
  bbva: { name: "BBVA", currency: "MXN", color: "indigo" },
  mercadoPago: { name: "Mercado Pago", currency: "MXN", color: "orange" },
  dolarApp: { name: "Dolar App", currency: "USD", color: "teal" },
  efectivo: { name: "Efectivo", currency: "MXN", color: "green" },
  edenred: { name: "Edenred", currency: "MXN", color: "red" },
};

// IDs reales (slug → id)
const ACCOUNT_IDS = {
  efectivo: "1gP5BBo2yT4EgbDOo2K7",
  mercadoPago: "HjQe1u3k7c5yR5FudUdA",
  bbva: "ItOx95vKThYE8qpJmczJ",
  dolarApp: "3dmzvUbX0fQKVaR2Kbel",
  edenred: "szb7ZPAt2PTS8apHIUai",
};

export const CATEGORIES = {
  "Movimientos entre Cuentas": { type: "transfer", items: ["Retiro de Efectivo"] },
  Necesidades: {
    type: "need",
    items: [
      "Renta / Hipoteca",
      "Servicios (Luz, Agua, Gas)",
      "Supermercado",
      "Transporte Público",
      "Gasolina",
      "Salud (Seguro, Medicinas)",
      "Psicólogo",
      "Educación Esencial",
    ],
  },
  "Deseos / Ocio": {
    type: "want",
    items: [
      "Restaurantes / Cafés",
      "Suscripciones (Streaming)",
      "Cine / Eventos",
      "Compras (Ropa, Gadgets)",
      "Viajes / Vacaciones",
      "Hobbies",
      "Gimnasio",
    ],
  },
  Ahorro: { type: "saving", items: ["Fondo de Emergencia", "Ahorro para Metas (Auto, Casa)"] },
  Inversión: { type: "investment", items: ["Acciones / Fondos", "Criptomonedas", "Plan de Retiro"] },
  Deudas: { type: "debt", items: ["Pago Tarjeta de Crédito", "Pago Préstamo Personal"] },
};

const fmt = (n, c = "MXN") =>
  new Intl.NumberFormat(c === "MXN" ? "es-MX" : "en-US", {
    style: "currency",
    currency: c,
  }).format(Number.isFinite(n) ? n : 0);

// ===== Util fechas =====
const inRange = (iso, startISO, endISO) => {
  if (!iso) return false;
  const t = new Date(iso).getTime();
  if (Number.isNaN(t)) return false;
  const afterStart = startISO ? t >= new Date(startISO).getTime() : true;
  const beforeEnd = endISO ? t <= (new Date(endISO).getTime() + 86399999) : true;
  return afterStart && beforeEnd;
};

// ===== normalización de cuentas (id/slug/nombre → slug) =====
const toSlugFactory = (accountsMapLocal, accountIdsLocal) => {
  const idToSlug = {};
  for (const s of Object.keys(accountIdsLocal || {})) idToSlug[accountIdsLocal[s]] = s;
  const nameToSlug = {};
  for (const [slug, a] of Object.entries(accountsMapLocal || {})) {
    if (a?.name) nameToSlug[a.name.toLowerCase()] = slug;
  }
  const alias = { mercadopago: "mercadoPago", dolarapp: "dolarApp" };

  return function toSlug(key) {
    if (!key) return null;
    const raw = String(key).trim();
    if (idToSlug[raw]) return idToSlug[raw];           // id → slug
    if (accountsMapLocal?.[raw]) return raw;           // slug → slug
    const lower = raw.toLowerCase();
    if (nameToSlug[lower]) return nameToSlug[lower];   // nombre → slug
    if (alias[lower]) return alias[lower];             // alias → slug
    return null;
  };
};

export default function App() {

  const [displayCurrency, setDisplayCurrency] = useState("MXN");

  // Convierte MXN → moneda seleccionada para mostrar
  const mxToDisplay = (mxn) => {
    const r = Number(usdToMxn) || 17.0;
    return displayCurrency === "USD" ? (Number(mxn) || 0) / r : (Number(mxn) || 0);
  };

  // Formatea usando la moneda seleccionada
  const fmtDisp = (mxn) => fmt(mxToDisplay(mxn), displayCurrency);

  // Estrategia editable (recomendada por default)
  const [strategy, setStrategy] = useState({
    needs: { pct: 50, account: "mercadoPago" },
    wants: { pct: 30, account: "dolarApp" },
    future: { pct: 20, account: "bbva" },
  });

  // Tasa USD→MXN
  const [usdToMxn, setUsdToMxn] = useState(17.0);
  useEffect(() => {
    (async () => {
      try {
        const res = await fetch(API_URL_USD_TO_MXN);
        const data = await res.json();
        if (data?.rates?.MXN) setUsdToMxn(data.rates.MXN);
      } catch {
        // deja 17.0
      }
    })();
  }, []);

  // cuentas dinámicas (slug -> { name, currency }) e ids (slug -> docId)
  const [accountsMap, setAccountsMap] = useState(ACCOUNTS);
  const [accountIds, setAccountIds] = useState(ACCOUNT_IDS);

  // Datos
  const [incomes, setIncomes] = useState([]);
  const [expenses, setExpenses] = useState([]);
  const [transfers, setTransfers] = useState([]);

  // UI
  const [chartView, setChartView] = useState("strategy");
  const [itemToDelete, setItemToDelete] = useState(null);
  const [notification, setNotification] = useState({ message: "", type: "" });

  // Filtro por fechas
  const [startDate, setStartDate] = useState("");
  const [endDate, setEndDate] = useState("");

  // Firebase
  const [userId, setUserId] = useState(null);
  const [isFirebaseReady, setIsFirebaseReady] = useState(false);

  // Helpers cuentas (usar mapa/ids actuales)
  const toSlug = useMemo(
    () => toSlugFactory(accountsMap, accountIds),
    [accountsMap, accountIds]
  );

  // Cuentas snapshot
  useEffect(() => {
    if (!isFirebaseReady || !db || !userId) return;
    dlog("Snapshot cuentas: suscribiendo…");

    const ref = collection(db, "artifacts", APP_ID, "users", userId, "accounts");
    const unsub = onSnapshot(ref, (snap) => {
      const dyn = {}, ids = {};
      snap.forEach((d) => {
        const { slug, name, currency } = d.data() || {};
        if (slug && name && currency) {
          dyn[slug] = { name, currency };
          ids[slug] = d.id;
        }
      });
      dlog("Snapshot cuentas:", { count: snap.size, dyn, ids });
      setAccountsMap({ ...ACCOUNTS, ...dyn });
      setAccountIds((prev) => ({ ...prev, ...ids }));
    }, (err) => dlog("Snapshot cuentas ERROR", err));

    return () => unsub();
  }, [isFirebaseReady, userId]);

  // Auth
  useEffect(() => {
    setLogLevel("debug");
    const unsub = onAuthStateChanged(auth, (user) => {
      if (user) {
        dlog("Auth OK", { uid: user.uid, APP_ID });
        setUserId(user.uid);
        setIsFirebaseReady(true);
      } else {
        dlog("Auth: usuario no autenticado");
        setUserId(null);
        setIsFirebaseReady(false);
      }
    });
    return () => unsub();
  }, []);

  // Movimientos snapshots
  useEffect(() => {
    if (!isFirebaseReady || !db || !userId) return;
    dlog("Snapshots movimientos: suscribiendo…");

    const incomesRef = collection(db, "artifacts", APP_ID, "users", userId, "incomes");
    const expensesRef = collection(db, "artifacts", APP_ID, "users", userId, "expenses");
    const transfersRef = collection(db, "artifacts", APP_ID, "users", userId, "transfers");

    const u1 = onSnapshot(incomesRef, (snap) => {
      const rows = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      dtable("Incomes", rows);
      setIncomes(rows);
    });
    const u2 = onSnapshot(expensesRef, (snap) => {
      const rows = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      dtable("Expenses", rows);
      setExpenses(rows);
    });
    const u3 = onSnapshot(transfersRef, (snap) => {
      const rows = snap.docs.map((d) => ({ id: d.id, ...d.data() }));
      dtable("Transfers", rows);
      setTransfers(rows);
    });

    return () => { u1(); u2(); u3(); };
  }, [isFirebaseReady, userId]);

  const showNotification = (message, type = "success", duration = 3000) => {
    setNotification({ message, type });
    setTimeout(() => setNotification({ message: "", type: "" }), duration);
  };

  // Escrituras
  const handleAddIncome = async ({ amount, currency, manualRate, account, isSalary }) => {
    if (!isFirebaseReady || !userId)
      return showNotification("La base de datos no está lista.", "error");

    const accSlug = toSlug(account) || account;

    let convertedAmount = amount;
    let rateUsed = null;
    let originalAmountText = `${fmt(amount, currency)}`;

    if (currency === "USD") {
      rateUsed = manualRate;
      if (!rateUsed || rateUsed <= 0) {
        try {
          const res = await fetch(API_URL_USD_TO_MXN);
          const data = await res.json();
          rateUsed = data?.rates?.MXN;
          if (!rateUsed) throw new Error("Tipo de cambio inválido");
        } catch {
          showNotification("No se pudo obtener el tipo de cambio automático.", "error");
          return;
        }
      }
      convertedAmount = amount * rateUsed;
      originalAmountText = `${fmt(amount, "USD")} (@${rateUsed.toFixed(4)})`;
    }

    const docData = {
      timestamp: new Date().toISOString(),
      amount,
      currency,
      convertedAmount,
      originalText: originalAmountText,
      account: accSlug,
      isSalary,
      rateUsed,
    };

    try {
      await addDoc(collection(db, "artifacts", APP_ID, "users", userId, "incomes"), docData);
      showNotification("Ingreso agregado correctamente.");
    } catch (e) {
      console.error("add income", e);
      showNotification("Error al guardar el ingreso.", "error");
    }
  };

  const handleAddExpense = async ({ amount, currency, category, account }) => {
    if (!isFirebaseReady || !userId)
      return showNotification("La base de datos no está lista.", "error");

    const accSlug = toSlug(account) || account;

    let convertedAmount = amount;
    if (currency === "USD") {
      try {
        const res = await fetch(API_URL_USD_TO_MXN);
        const data = await res.json();
        const rate = data?.rates?.MXN;
        if (!rate) throw new Error("Invalid exchange rate");
        convertedAmount = amount * rate;
      } catch {
        return showNotification("No se pudo obtener el tipo de cambio (USD).", "error");
      }
    }

    const group = Object.keys(CATEGORIES).find((g) => CATEGORIES[g].items.includes(category));
    const docData = {
      timestamp: new Date().toISOString(),
      amount,
      currency,
      convertedAmount,
      category,
      account: accSlug,
      type: CATEGORIES[group]?.type,
      group,
    };

    try {
      if (docData.category === "Retiro de Efectivo" && docData.account !== "efectivo") {
        const newTransfer = {
          timestamp: new Date().toISOString(),
          from: docData.account,
          to: "efectivo",
          amountSent: amount,
          currencySent: "MXN",
          amountReceived: amount,
          currencyReceived: "MXN",
          spread: 0,
          isWithdrawal: true,
        };
        await addDoc(collection(db, "artifacts", APP_ID, "users", userId, "transfers"), newTransfer);
        showNotification("Retiro de efectivo registrado como transferencia.");
      } else {
        await addDoc(collection(db, "artifacts", APP_ID, "users", userId, "expenses"), docData);
        showNotification("Egreso agregado correctamente.");
      }
    } catch (e) {
      console.error("add expense", e);
      showNotification("Error al guardar el egreso.", "error");
    }
  };

  const handleAddTransfer = async ({ from, to, amountSent, rate, amountReceived, spread }) => {
    if (!isFirebaseReady || !userId)
      return showNotification("La base de datos no está lista.", "error");

    const fromSlug = toSlug(from) || from;
    const toSlugVal = toSlug(to) || to;

    const docData = {
      timestamp: new Date().toISOString(),
      from: fromSlug,
      to: toSlugVal,
      amountSent,
      currencySent: accountsMap[fromSlug]?.currency || "MXN",
      amountReceived: amountReceived || amountSent,
      currencyReceived: accountsMap[toSlugVal]?.currency || "MXN",
      spread: spread || 0,
      rate: rate || null,
    };

    try {
      await addDoc(collection(db, "artifacts", APP_ID, "users", userId, "transfers"), docData);
      showNotification("Transferencia registrado con éxito.");
    } catch (e) {
      console.error("add transfer", e);
      showNotification("Error al guardar la transferencia.", "error");
    }
  };

  const handleDeleteItem = async () => {
    const { id, type } = itemToDelete || {};
    if (!isFirebaseReady || !id || !userId)
      return showNotification("No se puede eliminar el item.", "error");
    const coll =
      type === "Ingreso" ? "incomes" : type === "Egreso" ? "expenses" : type === "Transferencia" ? "transfers" : "";
    if (!coll) return;

    try {
      await deleteDoc(doc(db, "artifacts", APP_ID, "users", userId, coll, id));
      setItemToDelete(null);
      showNotification("Movimiento eliminado.");
    } catch (e) {
      console.error("delete", e);
      showNotification("Error al eliminar el movimiento.", "error");
    }
  };

  // Actualizar movimientos (edición desde historial)
  const handleUpdateMovement = async (id, movType, payload) => {
    if (!isFirebaseReady || !userId) return;
    const coll =
      movType === "Ingreso" ? "incomes" : movType === "Egreso" ? "expenses" : movType === "Transferencia" ? "transfers" : "";
    if (!coll) return;

    // Normaliza cuenta si viene en payload
    if (payload?.account) {
      const normalized = toSlug(payload.account) || payload.account;
      payload.account = normalized;
    }
    if (payload?.from) payload.from = toSlug(payload.from) || payload.from;
    if (payload?.to) payload.to = toSlug(payload.to) || payload.to;

    try {
      await updateDoc(doc(db, "artifacts", APP_ID, "users", userId, coll, id), payload);
      showNotification("Movimiento actualizado.");
    } catch (e) {
      console.error("update", e);
      showNotification("Error al actualizar el movimiento.", "error");
    }
  };

  // ===== FILTRADO por fechas =====
  const filtered = useMemo(() => {
    const startISO = startDate ? new Date(startDate).toISOString() : null;
    const endISO = endDate ? new Date(endDate).toISOString() : null;

    const inc = incomes.filter((i) => inRange(i.timestamp, startISO, endISO));
    const exp = expenses.filter((e) => inRange(e.timestamp, startISO, endISO));
    const tra = transfers.filter((t) => inRange(t.timestamp, startISO, endISO));

    return { inc, exp, tra };
  }, [incomes, expenses, transfers, startDate, endDate]);

  const srcIncomes = startDate || endDate ? filtered.inc : incomes;
  const srcExpenses = startDate || endDate ? filtered.exp : expenses;
  const srcTransfers = startDate || endDate ? filtered.tra : transfers;

  // ===== BALANCES por cuenta (desde historial filtrado) =====
  const { balances, totalBalanceMx, totalSpentMx } = useMemo(() => {
    // Inicializa saldos por slug
    const b = {};
    for (const k in accountsMap) b[k] = { balance: 0 };

    // Ingresos suman en su cuenta (MXN usa convertedAmount si está; USD en cuentas USD usa amount)
    srcIncomes.forEach((inc) => {
      const acc = toSlug(inc.account);
      if (!acc || !accountsMap[acc]) return;
      const curAcc = accountsMap[acc].currency;
      if (curAcc === "USD" && inc.currency === "USD") {
        b[acc].balance += Number(inc.amount) || 0;
      } else {
        b[acc].balance += Number(inc.convertedAmount ?? inc.amount) || 0;
      }
    });

    // Egresos restan en la cuenta (asumimos amount en moneda de la cuenta)
    srcExpenses.forEach((exp) => {
      const acc = toSlug(exp.account);
      if (!acc || !accountsMap[acc]) return;
      b[acc].balance -= Number(exp.amount) || 0;
    });

    // Transferencias mueven entre cuentas
    srcTransfers.forEach((t) => {
      const from = toSlug(t.from);
      const to = toSlug(t.to);
      if (from && b[from]) b[from].balance -= Number(t.amountSent ?? t.amount) || 0;
      if (to && b[to]) b[to].balance += Number(t.amountReceived ?? t.amount) || 0;
    });

    // total aprox a MXN con la tasa dinámica
    const approx = Number(usdToMxn) || 17.0;
    const totalMx = Object.keys(b).reduce((sum, k) => {
      const cur = accountsMap[k].currency;
      const val = b[k].balance;
      return sum + (cur === "USD" ? val * approx : val);
    }, 0);

    const spentMx = srcExpenses.reduce((sum, e) => {
      const acc = toSlug(e.account);
      const cur = e.currency || (acc ? accountsMap[acc]?.currency : "MXN");
      const val = Number(e.amount) || 0;
      return sum + (cur === "USD" ? val * approx : val);
    }, 0);

    return { balances: b, totalBalanceMx: totalMx, totalSpentMx: spentMx };
  }, [srcIncomes, srcExpenses, srcTransfers, accountsMap, toSlug, usdToMxn]);

  // ===== Helpers de conversión a MXN (reutilizables) =====
  const toMx = (amount, currency, rateUsed, fallbackRate) => {
    const n = Number(amount) || 0;
    const cur = (currency || "MXN").toUpperCase();
    if (cur === "USD") {
      const r = Number(rateUsed) || Number(fallbackRate) || 17.0;
      return n * r;
    }
    return n; // MXN
  };
  const incomeToMx = (i) => {
    const cmx = Number(i?.convertedAmount);
    if (Number.isFinite(cmx)) return cmx;
    return toMx(i?.amount, i?.currency, i?.rateUsed, usdToMxn);
  };
  const expenseToMx = (e) => {
    const cmx = Number(e?.convertedAmount);
    if (Number.isFinite(cmx)) return cmx;
    return toMx(e?.amount, e?.currency, e?.rateUsed, usdToMxn);
  };

  // ===== ESTRATEGIA editable (todo en MXN) =====
  const {
    totalSalaryIncome,
    totalGlobalIncome,
    strategyData,
    periodsInfo,
  } = useMemo(() => {
    const salaryIncomes = srcIncomes.filter((i) => i.isSalary);
    const totalSalary = salaryIncomes.reduce((s, i) => s + incomeToMx(i), 0);   // MXN
    const totalGlobal = srcIncomes.reduce((s, i) => s + incomeToMx(i), 0);      // MXN

    const sumByType = (t) =>
      srcExpenses.filter((e) => e.type === t).reduce((s, e) => s + expenseToMx(e), 0);

    const totalNeeds = sumByType("need") + sumByType("transfer");
    const totalWants = sumByType("want");
    const totalSpends = srcExpenses.reduce((s, e) => s + expenseToMx(e), 0);

    const pNeeds = Number(strategy?.needs?.pct) || 0;
    const pWants = Number(strategy?.wants?.pct) || 0;
    const pFuture = Number(strategy?.future?.pct) || 0;

    const needsIdeal = totalSalary * (pNeeds / 100);
    const wantsIdeal = totalSalary * (pWants / 100);
    const futureIdeal = totalSalary * (pFuture / 100);

    // Periodización
    let periods = salaryIncomes.length || 1;
    if (salaryIncomes.length === 0) {
      const hasRange = !!(startDate || endDate);
      if (hasRange) {
        const sd = startDate ? new Date(startDate).getTime()
          : (srcIncomes[0]?.timestamp ? new Date(srcIncomes[0].timestamp).getTime() : Date.now());
        const ed = endDate ? new Date(endDate).getTime() : Date.now();
        const days = Math.max(1, Math.ceil((ed - sd) / (1000 * 60 * 60 * 24)));
        periods = Math.max(1, Math.ceil(days / 14));
      }
    }

    // DEBUG útil
    dlog("Estrategia inputs", { usdToMxn, pNeeds, pWants, pFuture, startDate, endDate });
    dtable("Salary incomes (→MXN)", salaryIncomes.map(i => ({
      id: i.id, currency: i.currency, amount: i.amount, convertedAmount: i.convertedAmount,
      rateUsed: i.rateUsed, toMx: incomeToMx(i)
    })));
    dtable("Expenses (→MXN)", srcExpenses.map(e => ({
      id: e.id, type: e.type, group: e.group, currency: e.currency, amount: e.amount,
      convertedAmount: e.convertedAmount, rateUsed: e.rateUsed, toMx: expenseToMx(e)
    })));
    dlog("Estrategia totals", {
      totalSalary, totalGlobal, totalNeeds, totalWants, totalSpends,
      needsIdeal, wantsIdeal, futureIdeal
    });

    return {
      totalSalaryIncome: totalSalary,   // MXN
      totalGlobalIncome: totalGlobal,   // MXN
      strategyData: {
        needs: { ideal: needsIdeal, actual: totalNeeds, remaining: needsIdeal - totalNeeds },
        wants: { ideal: wantsIdeal, actual: totalWants, remaining: wantsIdeal - totalWants },
        future: { ideal: futureIdeal, actual: totalSalary - totalSpends },
      },
      periodsInfo: {
        periods,
        perPeriod: {
          needs: periods ? needsIdeal / periods : 0,
          wants: periods ? wantsIdeal / periods : 0,
          future: periods ? futureIdeal / periods : 0,
        },
      },
    };
  }, [srcIncomes, srcExpenses, startDate, endDate, strategy, usdToMxn]);

  // Gráfica (usa egresos en MXN consistentes)
  const chartConfig = useMemo(() => {
    const disp = (mxn) => displayCurrency === "USD" ? (Number(mxn) || 0) / (Number(usdToMxn) || 17) : (Number(mxn) || 0);
    const totalIncome = chartView === "strategy" ? totalSalaryIncome : totalGlobalIncome;
    const expensesToChart =
      chartView === "strategy"
        ? srcExpenses // puedes filtrar por tipo si lo quieres
        : srcExpenses;

    if (!Number.isFinite(totalIncome) || totalIncome <= 0) {
      return {
        data: {
          labels: ["Sin Ingresos"],
          datasets: [{ data: [1], backgroundColor: ["#e5e7eb"], borderColor: "#fff", borderWidth: 2 }],
        },
        options: { plugins: { legend: { display: false } }, responsive: true, maintainAspectRatio: false },
      };
    }

    const grouped = expensesToChart.reduce((acc, exp) => {
      const g = exp.group || "Otros";
      const v = expenseToMx(exp); // <-- consistente en MXN
      acc[g] = (acc[g] || 0) + v;
      return acc;
    }, {});
    const totalChart = Object.values(grouped).reduce((s, v) => s + v, 0);
    const remaining = Math.max(0, totalIncome - totalChart);

    const groupedDisp = Object.fromEntries(
      Object.entries(grouped).map(([k, v]) => [k, disp(v)])
    );
    const totalChartDisp = Object.values(groupedDisp).reduce((s, v) => s + v, 0);
    const remainingDisp = disp(totalIncome) - totalChartDisp;

    const labels = [chartView === "strategy" ? "Salario Restante" : "Ingreso Restante", ...Object.keys(groupedDisp)];
    const dataVals = [remainingDisp, ...Object.values(groupedDisp)];
    const colorMap = {
      "Salario Restante": "#4ade80",
      "Ingreso Restante": "#4ade80",
      Necesidades: "#fb923c",
      "Deseos / Ocio": "#2dd4bf",
      Ahorro: "#60a5fa",
      Inversión: "#a78bfa",
      Deudas: "#f472b6",
      "Movimientos entre Cuentas": "#9ca3af",
      Otros: "#cccccc",
    };
    const backgroundColor = labels.map((l) => colorMap[l] || "#cccccc");

    return {
      data: { labels, datasets: [{ data: dataVals, backgroundColor, borderColor: "#ffffff", borderWidth: 2 }] },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { position: "bottom" },
          tooltip: {
            tooltip: {
              callbacks: {
                label: (c) =>
                  `${c.label}: ${new Intl.NumberFormat(displayCurrency === "USD" ? "en-US" : "es-MX", {
                    style: "currency",
                    currency: displayCurrency,
                  }).format(c.parsed)}`,
              },
            },
          },
        },
      },
    };
  }, [chartView, totalSalaryIncome, totalGlobalIncome, srcExpenses, expenseToMx]);

  // Movimientos combinados (filtrados)
  const allMovements = useMemo(() => {
    const normalizeAcc = (x) => toSlug(x) || x || null;
    return [
      ...srcIncomes.map((i) => ({ ...i, account: normalizeAcc(i.account), movType: "Ingreso", tableId: `inc-${i.id}` })),
      ...srcExpenses.map((e) => ({ ...e, account: normalizeAcc(e.account), movType: "Egreso", tableId: `exp-${e.id}` })),
      ...srcTransfers.flatMap((t) => {
        const fromSlug = normalizeAcc(t.from);
        const toSlugVal = normalizeAcc(t.to);
        return [
          {
            ...t,
            movType: "Transferencia Salida",
            amount: t.amountSent,
            currency: t.currencySent,
            account: fromSlug,
            from: fromSlug,
            to: toSlugVal,
            tableId: `t-${t.id}-out`,
          },
          {
            ...t,
            movType: "Transferencia Entrada",
            amount: t.amountReceived,
            currency: t.currencyReceived,
            account: toSlugVal,
            from: fromSlug,
            to: toSlugVal,
            tableId: `t-${t.id}-in`,
          },
        ];
      }),
    ].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
  }, [srcIncomes, srcExpenses, srcTransfers, toSlug]);

  // CSV
  const handleCsvExport = () => {
    const headers = [
      "type",
      "id",
      "timestamp",
      "account",
      "amount",
      "currency",
      "convertedAmount",
      "rateUsed",
      "isSalary",
      "originalText",
      "category",
      "group",
      "description",
      "from",
      "to",
      "amountSent",
      "currencySent",
      "amountReceived",
      "currencyReceived",
      "spread",
    ];
    const esc = (s) => `"${(s ?? "").toString().replace(/"/g, '""')}"`;
    const rows = [
      ...incomes.map((inc) => ({ type: "income", ...inc })),
      ...expenses.map((exp) => ({ type: "expense", ...exp })),
      ...transfers.map((t) => ({ type: "transfer", ...t })),
    ];
    if (!rows.length) return showNotification("No hay datos para exportar.", "error");
    const csv = [headers.join(","), ...rows.map((r) => headers.map((h) => esc(r[h])).join(","))].join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = "historial_financiero.csv";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
  };

  const handleCsvImport = (e) => {
    const file = e.target.files?.[0];
    if (!file || !isFirebaseReady || !userId) return;
    const reader = new FileReader();
    reader.onload = async (ev) => {
      try {
        const text = ev.target.result;
        const lines = text.trim().split("\n");
        const headers = lines[0].split(",").map((h) => h.trim().replace(/"/g, ""));
        const parseNum = (v) => (v && v.trim() !== "" && v !== "null" ? parseFloat(v) : null);

        for (let i = 1; i < lines.length; i++) {
          const values = lines[i].match(/(".*?"|[^",]+)(?=\s*,|\s*$)/g) || [];
          const row = headers.reduce((o, h, idx) => {
            o[h] = (values[idx] ?? "").replace(/"/g, "");
            return o;
          }, {});

          if (row.account) row.account = toSlug(row.account) || row.account;
          if (row.from) row.from = toSlug(row.from) || row.from;
          if (row.to) row.to = toSlug(row.to) || row.to;

          if (row.type === "income") {
            const newIncome = {
              ...row,
              amount: parseNum(row.amount),
              convertedAmount: parseNum(row.convertedAmount),
              rateUsed: parseNum(row.rateUsed),
              isSalary: row.isSalary === "true" || row.isSalary === true,
            };
            delete newIncome.id;
            await addDoc(collection(db, "artifacts", APP_ID, "users", userId, "incomes"), newIncome);
          } else if (row.type === "expense") {
            const newExpense = {
              ...row,
              amount: parseNum(row.amount),
              convertedAmount: parseNum(row.convertedAmount),
            };
            delete newExpense.id;
            await addDoc(collection(db, "artifacts", APP_ID, "users", userId, "expenses"), newExpense);
          } else if (row.type === "transfer") {
            const newTransfer = {
              ...row,
              amountSent: parseNum(row.amountSent),
              amountReceived: parseNum(row.amountReceived),
              spread: parseNum(row.spread),
            };
            delete newTransfer.id;
            await addDoc(collection(db, "artifacts", APP_ID, "users", userId, "transfers"), newTransfer);
          }
        }
        showNotification("¡Datos importados correctamente!");
      } catch (err) {
        console.error("CSV import error", err);
        showNotification("Error al procesar el archivo CSV.", "error");
      }
    };
    reader.readAsText(file);
    e.target.value = "";
  };

  const clearDates = () => {
    setStartDate("");
    setEndDate("");
  };

  // Render
  return (
    <div className="bg-gray-100 min-h-screen text-gray-800 font-sans">
      <Notification
        message={notification.message}
        type={notification.type}
        onClose={() => setNotification({ message: "", type: "" })}
      />
      <DeleteConfirmationModal
        item={itemToDelete}
        onConfirm={handleDeleteItem}
        onCancel={() => setItemToDelete(null)}
      />

      <Header />

      <div className="pt-16 p-4 lg:p-8">
        <div className="w-full lg:w-4/5 mx-auto">
          {/* Filtros por fecha */}
          <section className="mb-6">
            <div className="flex items-center gap-2">
              <span className="text-xs text-slate-500">Moneda:</span>
              <div className="inline-flex rounded-lg border border-slate-200 overflow-hidden">
                <button
                  type="button"
                  onClick={() => setDisplayCurrency("MXN")}
                  className={`px-3 py-1 text-xs ${displayCurrency === "MXN" ? "bg-blue-600 text-white" : "bg-white text-slate-700"}`}
                >
                  MXN
                </button>
                <button
                  type="button"
                  onClick={() => setDisplayCurrency("USD")}
                  className={`px-3 py-1 text-xs ${displayCurrency === "USD" ? "bg-blue-600 text-white" : "bg-white text-slate-700"}`}
                >
                  USD
                </button>
              </div>
            </div>

            <div className="bg-white border border-slate-200 rounded-2xl p-4 flex flex-col sm:flex-row items-start sm:items-end gap-3">
              <div>
                <label className="block text-xs text-slate-500 mb-1">Fecha inicial</label>
                <input type="date" className="input" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
              </div>
              <div>
                <label className="block text-xs text-slate-500 mb-1">Fecha final</label>
                <input type="date" className="input" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
              </div>
              <div className="flex-1" />
              {(startDate || endDate) ? (
                <div className="flex items-center gap-2">
                  <div className="text-xs text-slate-600">
                    Filtrando del <strong>{startDate || "—"}</strong> al <strong>{endDate || "—"}</strong>
                  </div>
                  <button className="btn btn-ghost btn-sm" onClick={clearDates}>Limpiar</button>
                </div>
              ) : (
                <div className="text-xs text-slate-500">Sin filtros (mostrando todo)</div>
              )}
            </div>

            <div className="mt-3 grid grid-cols-1 sm:grid-cols-2 gap-3">
              <div className="rounded-xl border border-indigo-100 bg-indigo-50 p-4">
                <div className="text-xs text-indigo-700 mb-1">Salario en el periodo</div>
                <div className="text-2xl font-bold text-indigo-900">{fmtDisp(totalSalaryIncome)}</div>
                <div className="text-[11px] text-indigo-700 mt-1">Total salario: {fmt(totalSalaryIncome)} · Periodos: {periodsInfo.periods}</div>
              </div>
              <div className="rounded-xl border border-emerald-100 bg-emerald-50 p-4">
                <div className="text-xs text-emerald-700 mb-2">Depósitos ideales por quincena</div>
                <div className="flex flex-wrap gap-3 text-sm">
                  <span>Necesidades: <strong>{fmtDisp(periodsInfo.perPeriod?.needs || 0)}</strong></span>
                  <span>Deseos: <strong>{fmtDisp(periodsInfo.perPeriod?.wants || 0)}</strong></span>
                  <span>Futuro: <strong>{fmtDisp(periodsInfo.perPeriod?.future || 0)}</strong></span>
                </div>
              </div>
            </div>
          </section>

          <main className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <aside className="lg:col-span-1 bg-white p-6 rounded-2xl shadow-lg flex flex-col self-start">
              <IncomeForm ACCOUNTS={accountsMap} onAddIncome={handleAddIncome} onNotify={showNotification} />

              <ExpenseForm ACCOUNTS={accountsMap} CATEGORIES={CATEGORIES} onAddExpense={handleAddExpense} onNotify={showNotification} />

              {/* <AddAccountForm ... /> */}

              <AccountBalances
                accountsMap={accountsMap}
                balances={balances}
                totalBalanceMx={totalBalanceMx}
                totalSpentMx={totalSpentMx}
                onDeleteAccount={(slug) => {
                  const id = accountIds[slug];
                  if (!id) return showNotification("No encuentro el ID de la cuenta.", "error");
                  deleteDoc(doc(db, "artifacts", APP_ID, "users", userId, "accounts", id))
                    .then(() => showNotification("Cuenta eliminada."))
                    .catch(() => showNotification("No se pudo eliminar la cuenta.", "error"));
                }}
              />
            </aside>

            <section className="lg:col-span-2 flex flex-col gap-8">
              <FinanceChart
                data={chartConfig.data}
                options={chartConfig.options}
                chartView={chartView}
                setChartView={setChartView}
                totalSalaryIncome={totalSalaryIncome}
                totalGlobalIncome={totalGlobalIncome}
              />
              <TransferForm ACCOUNTS={accountsMap} onAddTransfer={handleAddTransfer} onNotify={showNotification} />
              <Strategy503020
                data={strategyData}           // en MXN
                strategy={strategy}
                onChangeStrategy={setStrategy}
                accountsMap={accountsMap}
                usdToMxn={usdToMxn}
                displayCurrency={displayCurrency}   // <-- NUEVO
              />

            </section>

            <div className="lg:col-span-3">
              <HistoryTable
                ACCOUNTS={accountsMap}
                ACCOUNT_IDS={accountIds}
                movements={allMovements || []}
                onDeleteClick={(id, type) => setItemToDelete({ id, type })}
                onCsvExport={handleCsvExport}
                onCsvImport={handleCsvImport}
                onUpdateMovement={handleUpdateMovement}
              />
            </div>
          </main>
        </div>
      </div>
    </div>
  );
}


//src/index.css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Base: tipografía + tamaños */
@layer base {
  html {
    font-size: 14px;
  }

  /* un pelín más pequeño que el default */
  body {
    @apply bg-surface-50 text-slate-800 font-inter antialiased;
  }
}

/* Componentes utilitarios coherentes */
@layer components {

  /* Cards */
  .card {
    @apply bg-surface-0 rounded-2xl shadow-elev-1 border border-slate-100;
  }

  .card-body {
    @apply p-6;
  }

  /* Secciones / títulos */
  .section-title {
    @apply text-[1.25rem] font-semibold text-slate-900;
  }

  .section-subtle {
    @apply text-sm text-slate-500;
  }

  /* Botones */
  .btn {
    @apply inline-flex items-center justify-center gap-2 rounded-xl px-4 py-2 text-sm font-medium transition-colors duration-150 focus:outline-none focus:ring-2 focus:ring-offset-2;
  }

  .btn-primary {
    @apply bg-primary-600 text-white hover:bg-primary-700 focus:ring-primary-400;
  }

  .btn-neutral {
    @apply bg-surface-0 text-slate-700 border border-slate-200 hover:bg-surface-100 focus:ring-slate-300;
  }

  .btn-outline {
    @apply border border-slate-300 text-slate-700 hover:bg-surface-100 focus:ring-slate-300;
  }

  .btn-danger {
    @apply bg-danger text-white hover:bg-red-600 focus:ring-red-400;
  }

  .btn-xs {
    @apply text-xs px-3 py-1.5;
  }

  .btn-lg {
    @apply text-base px-5 py-2.5;
  }

  /* Toggle pills (para MXN/USD, Strategy/Global tabs) */
  .pill {
    @apply px-3 py-1.5 text-sm rounded-xl border border-slate-200 bg-surface-0 hover:bg-surface-100;
  }

  .pill-active {
    @apply bg-primary-600 text-white border-transparent hover:bg-primary-700;
  }

  /* Inputs / selects coherentes (plugin forms + retoques) */
  .input {
    @apply w-full rounded-xl border-slate-300 focus:border-primary-500 focus:ring-primary-500;
  }

  .select {
    @apply input;
  }

  .checkbox {
    @apply rounded text-primary-600 focus:ring-primary-500;
  }
}

/* Scrollbar (opcional) */
.custom-scrollbar::-webkit-scrollbar {
  width: 8px;
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: #f3f4f6;
  border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #a8b0bb;
  border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #8b94a1;
}

@layer components {
  .card {
    @apply bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden;
  }

  .card-padding {
    @apply p-6 sm:p-8;
  }
}

//src/main.jsx 
// src/main.jsx
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import './index.css';
import AuthGate from "./components/AuthGate.jsx";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <AuthGate>
      <App />
    </AuthGate>
  </React.StrictMode>
);

//src/tw.css

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}

button:hover {
  border-color: #646cff;
}

button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }

  a:hover {
    color: #747bff;
  }

  button {
    background-color: #f9f9f9;
  }
}
